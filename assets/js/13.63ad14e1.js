(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{406:function(s,a,n){"use strict";n.r(a);var e=n(0),r=Object(e.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"函数式编程术语"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数式编程术语"}},[s._v("#")]),s._v(" 函数式编程术语")]),s._v(" "),a("blockquote",[a("p",[s._v("译者注：本项目译自 "),a("a",{attrs:{href:"https://github.com/hemanth/functional-programming-jargon",target:"_blank",rel:"noopener noreferrer"}},[s._v("functional-programing-jargon"),a("OutboundLink")],1),s._v("，专业术语居多，如有错误，可以提 pr 更正。除了术语翻译，针对每项术语，也有代码示例，位于 /demos 目录下。另外，这里也有几份不错的文章和仓库。")])]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2017/02/fp-tutorial.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("函数式编程入门教程"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/MostlyAdequate/mostly-adequate-guide",target:"_blank",rel:"noopener noreferrer"}},[s._v("mostly-adequate-guide (10749 stars)"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/llh911001/mostly-adequate-guide-chinese",target:"_blank",rel:"noopener noreferrer"}},[s._v("mostly-adequate-guide-chinese (602 stars)"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/fantasyland/fantasy-land",target:"_blank",rel:"noopener noreferrer"}},[s._v("fantasy-land"),a("OutboundLink")],1)])]),s._v(" "),a("p",[s._v("函数式编程有许多优势，由此越来越受欢迎。然而每个编程范式 (paradigm) 都有自己唯一的术语，函数式编程也不例外。我们提供一张术语表，希望使你学习函数式编程变得容易些。")]),s._v(" "),a("p",[s._v("示例均为 javascript (ES2015)。"),a("a",{attrs:{href:"https://github.com/hemanth/functional-programming-jargon/wiki/Why-JavaScript%3F",target:"_blank",rel:"noopener noreferrer"}},[s._v("为什么使用JavaScript?"),a("OutboundLink")],1)]),s._v(" "),a("p",[a("em",[s._v("尚在 WIP 阶段，欢迎 pr。")])]),s._v(" "),a("p",[s._v("如果适用，本篇文档使用定义在 "),a("a",{attrs:{href:"https://github.com/fantasyland/fantasy-land",target:"_blank",rel:"noopener noreferrer"}},[s._v("Fantasy Land spec"),a("OutboundLink")],1),s._v(" 中的术语。")]),s._v(" "),a("p",[a("strong",[s._v("目录")])]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#arity",target:"_blank",rel:"noopener noreferrer"}},[s._v("Arity"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#higher-order-functions-hof",target:"_blank",rel:"noopener noreferrer"}},[s._v("高阶函数 (HOF)"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#closure",target:"_blank",rel:"noopener noreferrer"}},[s._v("闭包 (Closure)"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#partial-application",target:"_blank",rel:"noopener noreferrer"}},[s._v("偏函数应用 (Partial Application)"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#currying",target:"_blank",rel:"noopener noreferrer"}},[s._v("柯里化 (Currying)"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#auto-currying",target:"_blank",rel:"noopener noreferrer"}},[s._v("自动柯里化 (Auto Currying)"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#function-composition",target:"_blank",rel:"noopener noreferrer"}},[s._v("函数组合 (Function Composition)"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#continuation",target:"_blank",rel:"noopener noreferrer"}},[s._v("后续 (Continuation)"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#purity",target:"_blank",rel:"noopener noreferrer"}},[s._v("纯函数 (Purity)"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#side-effects",target:"_blank",rel:"noopener noreferrer"}},[s._v("副作用 (Side effects)"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#idempotent",target:"_blank",rel:"noopener noreferrer"}},[s._v("幂等性 (Idempotent)"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#point-free-style",target:"_blank",rel:"noopener noreferrer"}},[s._v("Point-Free 风格 (Point-Free Style)"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#predicate",target:"_blank",rel:"noopener noreferrer"}},[s._v("断定 (Predicate)"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#contracts",target:"_blank",rel:"noopener noreferrer"}},[s._v("契约 (Contracts)"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#category",target:"_blank",rel:"noopener noreferrer"}},[s._v("范畴 (Category)"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#value",target:"_blank",rel:"noopener noreferrer"}},[s._v("值 (Value)"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#constant",target:"_blank",rel:"noopener noreferrer"}},[s._v("常量 (Constant)"),a("OutboundLink")],1)]),s._v(" "),a("li",[s._v("函子 (Functor)\n"),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#preserves-identity",target:"_blank",rel:"noopener noreferrer"}},[s._v("一致性 (Preserves identity)"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#composable",target:"_blank",rel:"noopener noreferrer"}},[s._v("组合性 (Composable)"),a("OutboundLink")],1)])])]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#pointed-functor",target:"_blank",rel:"noopener noreferrer"}},[s._v("指向函子 (Pointed Functor)"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#lift",target:"_blank",rel:"noopener noreferrer"}},[s._v("抬升 (Lift)"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#referential-transparency",target:"_blank",rel:"noopener noreferrer"}},[s._v("引用透明性 (Referential Transparency)"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#equational-reasoning",target:"_blank",rel:"noopener noreferrer"}},[s._v("等式推理 (Equational Reasoning)"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#lambda",target:"_blank",rel:"noopener noreferrer"}},[s._v("Lambda"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#lambda-calculus",target:"_blank",rel:"noopener noreferrer"}},[s._v("Lambda 演算 (Lambda Calculus)"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#lazy-evaluation",target:"_blank",rel:"noopener noreferrer"}},[s._v("惰性求值 (Lazy evaluation)"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#monoid",target:"_blank",rel:"noopener noreferrer"}},[s._v("幺半群 (Monoid)"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#monad",target:"_blank",rel:"noopener noreferrer"}},[s._v("单子 (Monad)"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#comonad",target:"_blank",rel:"noopener noreferrer"}},[s._v("余单子 (Comonad)"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#applicative-functor",target:"_blank",rel:"noopener noreferrer"}},[s._v("应用函子 (Applicative Functor)"),a("OutboundLink")],1)]),s._v(" "),a("li",[s._v("态射 (Morphism)\n"),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#endomorphism",target:"_blank",rel:"noopener noreferrer"}},[s._v("Endomorphism (自同态)"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#isomorphism",target:"_blank",rel:"noopener noreferrer"}},[s._v("Isomorphism (同构)"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#homomorphism",target:"_blank",rel:"noopener noreferrer"}},[s._v("Homomorphism (同态)"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#catamorphism",target:"_blank",rel:"noopener noreferrer"}},[s._v("Catamorphism"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#anamorphism",target:"_blank",rel:"noopener noreferrer"}},[s._v("Anamorphism"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#hylomorphism",target:"_blank",rel:"noopener noreferrer"}},[s._v("Hylomorphism"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#paramorphism",target:"_blank",rel:"noopener noreferrer"}},[s._v("Paramorphism"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#apomorphism",target:"_blank",rel:"noopener noreferrer"}},[s._v("Apomorphism"),a("OutboundLink")],1)])])]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#setoid",target:"_blank",rel:"noopener noreferrer"}},[s._v("Setoid"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#semigroup",target:"_blank",rel:"noopener noreferrer"}},[s._v("半群 (Semigroup)"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#foldable",target:"_blank",rel:"noopener noreferrer"}},[s._v("可折叠性 (Foldable)"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#lens",target:"_blank",rel:"noopener noreferrer"}},[s._v("透镜 (Lens)"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#type-signatures",target:"_blank",rel:"noopener noreferrer"}},[s._v("类型签名 (Type Signatures)"),a("OutboundLink")],1)]),s._v(" "),a("li",[s._v("代数数据类型 (Algebraic data type)\n"),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#sum-type",target:"_blank",rel:"noopener noreferrer"}},[s._v("和类型 (Sum type)"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#product-type",target:"_blank",rel:"noopener noreferrer"}},[s._v("积类型 (Product type)"),a("OutboundLink")],1)])])]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#option",target:"_blank",rel:"noopener noreferrer"}},[s._v("可选类型 (Option)"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#function",target:"_blank",rel:"noopener noreferrer"}},[s._v("函数 (Function)"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#partial-function",target:"_blank",rel:"noopener noreferrer"}},[s._v("偏函数 (Partial Function)"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#functional-programming-libraries-in-javascript",target:"_blank",rel:"noopener noreferrer"}},[s._v("函数式编程库"),a("OutboundLink")],1)])]),s._v(" "),a("h2",{attrs:{id:"arity"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arity"}},[s._v("#")]),s._v(" Arity")]),s._v(" "),a("p",[s._v("函数参数的个数。来自于单词 unary(一元), binary(二元), ternary(三元) 等等。这个单词是由 -ary 与 -ity 两个后缀拼接而成。例如，加法函数有两个参数，因此它被定义为二元函数("),a("code",[s._v("binary function")]),s._v(")，或者说它的 "),a("code",[s._v("arity")]),s._v(" 是2。它也被那些更喜欢希腊词根而非拉丁词根的人称为 "),a("code",[s._v("dyadic")]),s._v("。同样地，带有可变数量的参数的函数被称为 "),a("code",[s._v("variadic")]),s._v("，而二元函数只能且必须带两个参数，尽管有柯里化(currying)和偏函数应用(partial application)的存在(见下文)。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const sum = (a, b) => a + b\n\nconst arity = sum.length\nconsole.log(arity)        // 2\n\n// 函数sum的arity为2。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh/blob/master/demos/arity.js",target:"_blank",rel:"noopener noreferrer"}},[s._v("示例"),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"高阶函数-higher-order-function-hof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#高阶函数-higher-order-function-hof"}},[s._v("#")]),s._v(" 高阶函数 (Higher-Order Function / HOF)")]),s._v(" "),a("p",[s._v("以函数为参数或/和返回值的函数。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const filter = (predicate, xs) => xs.filter(predicate)\n\nconst is = (type) => (x) => Object(x) instanceof type\n\nfilter(is(Number), [0, '1', 2, null]) // 0, 2\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh/blob/master/demos/hoc.js",target:"_blank",rel:"noopener noreferrer"}},[s._v("示例"),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"闭包-closure"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#闭包-closure"}},[s._v("#")]),s._v(" 闭包 (Closure)")]),s._v(" "),a("p",[s._v("闭包是访问在其作用域外的变量的一种方式。正式地说，闭包是一种用于实现词法作用域命名绑定的技术。它是存储一个函数和它的环境的一种方法。")]),s._v(" "),a("p",[s._v("闭包是一个作用域，它会捕获函数的局部变量，因此即使执行过程已经移出了定义它的那个代码块，也可以访问它们。也就是说，它们允许在声明变量的代码块已经执行完成之后，还是可以引用这个作用域。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const addTo = x => y => x + y;\nvar addToFive = addTo(5);\naddToFive(3); //返回 8\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("函数"),a("code",[s._v("addTo()")]),s._v("返回了一个函数(在内部调用了"),a("code",[s._v("add()")]),s._v(")，我们将它保存在了一个叫做"),a("code",[s._v("addToFive")]),s._v("的变量中，并且柯里化地用一个参数5来调用它。")]),s._v(" "),a("p",[s._v("理想情况下，当函数"),a("code",[s._v("addTo")]),s._v("执行完成后，它的作用域，包括本地变量add(即+)，x，y，都应该无法访问了。但是，"),a("code",[s._v("addToFive()")]),s._v("的调用返回了8。这说明，"),a("code",[s._v("addTo")]),s._v("函数的状态被保存了，即使在代码块已经完成执行之后。否则，就不会知道"),a("code",[s._v("addTo")]),s._v("曾经被"),a("code",[s._v("addTo(5)")]),s._v("这样调用过，且x的值被设为了5。")]),s._v(" "),a("p",[s._v("词法作用域(lexical scoping)是它能找到x和add这两个已经完成执行的父级私有变量的原因。这个值就称为闭包。")]),s._v(" "),a("p",[s._v("栈和函数的词法作用域被以父函数的引用的形式存储。这可以防止闭包和底层的变量被垃圾回收(因为至少有一个对它的有效引用)。")]),s._v(" "),a("p",[s._v("Lambda Vs 闭包：Lambda本质上是一个内联定义的函数，而不是声明函数的标准方法。Lambda经常可以作为对象被传递。")]),s._v(" "),a("p",[s._v("闭包是通过引用其主体外部的字段来将其周围的状态包裹进来的函数。被包裹的状态在闭包调用期间保持不变。")]),s._v(" "),a("h2",{attrs:{id:"偏函数应用-partial-application"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#偏函数应用-partial-application"}},[s._v("#")]),s._v(" 偏函数应用 (Partial Application)")]),s._v(" "),a("p",[s._v('"部分地"应用一个函数，即预设原始函数的部分参数来创建一个新的函数。')]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 创建偏函数，固定一些参数\nconst partical = (f, ...args) =>\n  // 返回一个带有剩余参数的函数\n  (...moreArgs) =>\n    // 调用原始函数\n    f(...args, ...moreArgs)\n\nconst add3 = (a, b, c) => a + b + c // (c) => 2 + 3 + c\n\n// 部分地将`2`和`3`应用于`add3`，得到一个只有一个参数的函数\nconst fivePlus = partical(add3, 2, 3)\n\nfivePlus(4)  // 9\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("也可以使用 "),a("code",[s._v("Function.prototype.bind")]),s._v(" 实现偏函数。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const add1More = add3.bind(null, 2, 3) // (c) => 2 + 3 + c\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("偏函数应用通过对复杂的函数填充一部分数据来构成一个简单的函数。柯里化就是自动实现的偏函数。")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh/blob/master/demos/partial.js",target:"_blank",rel:"noopener noreferrer"}},[s._v("示例"),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"柯里化-currying"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#柯里化-currying"}},[s._v("#")]),s._v(" 柯里化 (Currying)")]),s._v(" "),a("p",[s._v("将一个多元函数转变为一元函数的过程。 每当函数被调用时，它仅仅接收一个参数并且返回带有一个参数的函数，直到传递完所有的参数。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const sum = (a, b) => a + b\n\nconst curriedSum = (a) => (b) => a + b\n\ncurriedSum(3)(4)         // 7\n\nconst add2 = curriedSum(2)\n\nadd2(10)     // 12\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh/blob/master/demos/curry.js",target:"_blank",rel:"noopener noreferrer"}},[s._v("示例"),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"自动柯里化-auto-currying"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自动柯里化-auto-currying"}},[s._v("#")]),s._v(" 自动柯里化 (Auto Currying)")]),s._v(" "),a("p",[s._v("将一个包含多个参数的函数转换成另一个函数，这个函数如果被给到的参数少于正确的数量，就会返回一个接受剩余参数的函数。")]),s._v(" "),a("p",[s._v("lodash & Ramda 有一个"),a("code",[s._v("curry")]),s._v("函数可以做到这一点。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const add = (x, y) => x + y\n\nconst curriedAdd = _.curry(add)\n\ncurriedAdd(1, 2)   // 3\ncurriedAdd(1)(2)   // 3\ncurriedAdd(1)      // (y) => 1 + y\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh/blob/master/demos/curry2.js",target:"_blank",rel:"noopener noreferrer"}},[s._v("示例"),a("OutboundLink")],1)]),s._v(" "),a("h4",{attrs:{id:"进一步阅读"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进一步阅读"}},[s._v("#")]),s._v(" 进一步阅读")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://fr.umio.us/favoring-curry/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Favoring Curry"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://www.youtube.com/watch?v=m3svKOdZijA",target:"_blank",rel:"noopener noreferrer"}},[s._v("Hey Underscore, You're Doing It Wrong!"),a("OutboundLink")],1)])]),s._v(" "),a("h2",{attrs:{id:"函数组合-function-composition"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数组合-function-composition"}},[s._v("#")]),s._v(" 函数组合 (Function Composition)")]),s._v(" "),a("p",[s._v("把两个函数放在一起形成第三个函数的行为，一个函数的输入为另一个函数的输出。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const compose = (f, g) => (a) => f(g(a))    // 定义\nconst floorAndToString = compose((val) => val.toString(), Math.floor) // 使用\nfloorAndToString(12.12)   // '12'\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh/blob/master/demos/compose.js",target:"_blank",rel:"noopener noreferrer"}},[s._v("示例"),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"continuation-后续"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#continuation-后续"}},[s._v("#")]),s._v(" Continuation (后续)")]),s._v(" "),a("p",[s._v("在一个程序执行的任意时刻，尚未执行的代码称为 Continuation。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const printAsString = (num) => console.log(`Given ${num}`)\n\nconst addOneAndContinue = (num, cc) => {\n  const result = num + 1\n  cc(result)\n}\n\naddOneAndContinue(2, printAsString) // 'Given 3'\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("Continuation 在异步编程中很常见，比如当程序需要接收到数据才能够继续执行。请求的响应通常作为代码的剩余执行部分，一旦接收到数据，对数据的处理被作为 Continuation。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const continueProgramWith = (data) => {\n  // 继续执行程序\n}\n\nreadFileAsync('path/to/file', (err, response) => {\n  if (err) {\n    // 错误处理\n    return\n  }\n  continueProgramWith(response)\n})\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("h2",{attrs:{id:"纯函数-purity"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#纯函数-purity"}},[s._v("#")]),s._v(" 纯函数 (Purity)")]),s._v(" "),a("p",[s._v("输出仅由输入决定，且不产生副作用。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const greet = (name) => `hello, ${name}`\n\ngreet('world')\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("以下代码不是纯函数：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("window.name = 'Brianne'\n\nconst greet = () => `Hi, ${window.name}`\n\ngreet() // \"Hi, Brianne\"\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("以上示例中，函数输出基于在函数外部存储的数据。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let greeting\n\nconst greet = (name) => {\n    greeting = `Hi, ${name}`\n}\n\ngreet('Brianne')\ngreeting // \"Hi, Brianne\"\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("以上示例中，函数修改了外部状态。")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh/blob/master/demos/purity.js",target:"_blank",rel:"noopener noreferrer"}},[s._v("示例"),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"副作用-side-effects"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#副作用-side-effects"}},[s._v("#")]),s._v(" 副作用 (Side effects)")]),s._v(" "),a("p",[s._v("如果一个函数或者表达式除了返回一个值之外，还与外部可变状态进行了交互（读取或写入），则它是有副作用的。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const differentEveryTime = new Date()\nconsole.log('IO就是一种副作用!')\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh/blob/master/demos/sideEffect.js",target:"_blank",rel:"noopener noreferrer"}},[s._v("示例"),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"幂等-idempotent"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#幂等-idempotent"}},[s._v("#")]),s._v(" 幂等 (Idempotent)")]),s._v(" "),a("p",[s._v("如果一个函数执行多次皆返回相同的结果，则它是幂等的。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("f(f(x)) ≍ f(x)\nMath.abs(Math.abs(10))\nsort(sort(sort([2, 1])))\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh/blob/master/demos/idempotent.js",target:"_blank",rel:"noopener noreferrer"}},[s._v("示例"),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"point-free-风格-point-free-style"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#point-free-风格-point-free-style"}},[s._v("#")]),s._v(" Point-Free 风格 (Point-Free Style)")]),s._v(" "),a("p",[s._v("定义函数时，不显式地指出函数所带参数。这种风格通常需要柯里化或者高阶函数。也叫 Tacit programming。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 已知：\nconst map = (fn) => (list) => list.map(fn)\nconst add = (a) => (b) => a + b\n\n// 所以：\n\n// 非Points-Free —— number 是显式参数\nconst incrementAll = (numbers) => map(add(1))(numbers)\n\n// Points-Free —— list 是隐式参数\nconst incrementAll2 = map(add(1))\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[a("code",[s._v("incrementAll")]),s._v(" 识别并且使用了 "),a("code",[s._v("numbers")]),s._v(" 参数，因此它不是 Point-Free 风格的。 "),a("code",[s._v("incrementAll2")]),s._v(" 仅连接函数与值，并不提及它所使用的参数，因为它是 Point-Free 风格的。")]),s._v(" "),a("p",[s._v("Point-Free 风格的函数就像平常的赋值，不使用 "),a("code",[s._v("function")]),s._v(" 或者 "),a("code",[s._v("=>")]),s._v("。")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh/blob/master/demos/pointFree.js",target:"_blank",rel:"noopener noreferrer"}},[s._v("示例"),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"断定-predicate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#断定-predicate"}},[s._v("#")]),s._v(" 断定 (Predicate)")]),s._v(" "),a("p",[s._v("根据输入返回 true 或 false。通常用在 array filter 的回调函数中。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const predicate = (a) => a > 2\n\n;[1, 2, 3, 4].filter(predicate)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh/blob/master/demos/predicate.js",target:"_blank",rel:"noopener noreferrer"}},[s._v("示例"),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"契约-contracts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#契约-contracts"}},[s._v("#")]),s._v(" 契约 (Contracts)")]),s._v(" "),a("p",[s._v("契约规定了函数或表达式在运行时的行为的职责和保障。它表现为一组规则，这些规则是对函数或表达式的输入和输出的期望。当违反契约时，将抛出一个错误。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 定义的contract: int -> boolean\nconst contract = (input) => {\n  if (typeof input === 'number') return true\n  throw new Error('Contract Violated: expected int -> int')\n}\n\nconst addOne = (num) => contract(num) && num + 1\n\naddOne(2) // 3\naddOne('hello') // 违反了contract: int -> boolean\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh/blob/master/demos/contracts.js",target:"_blank",rel:"noopener noreferrer"}},[s._v("示例"),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"范畴-category"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#范畴-category"}},[s._v("#")]),s._v(" 范畴 (Category)")]),s._v(" "),a("p",[s._v("在范畴论中，范畴是指对象集合及它们之间的态射 (morphism)。在编程中，数据类型作为对象，函数作为态射。")]),s._v(" "),a("p",[s._v("一个有效的范畴遵从以下三个原则：")]),s._v(" "),a("ol",[a("li",[s._v("必有一个同一态射（identity morphism）将一个对象映射到它自身。即当 "),a("code",[s._v("a")]),s._v(" 是范畴里的一个对象时，必有一个函数使 "),a("code",[s._v("a -> a")]),s._v("。")]),s._v(" "),a("li",[s._v("态射必是可组合的。"),a("code",[s._v("a")]),s._v("，"),a("code",[s._v("b")]),s._v("，"),a("code",[s._v("c")]),s._v(" 是范畴里的对象，"),a("code",[s._v("f")]),s._v(" 是态射 "),a("code",[s._v("a -> b")]),s._v("，"),a("code",[s._v("g")]),s._v(" 是 "),a("code",[s._v("b -> c")]),s._v(" 态射。"),a("code",[s._v("g(f(x))")]),s._v(" 一定与 "),a("code",[s._v("(g • f)(x)")]),s._v(" 是等价的。")]),s._v(" "),a("li",[s._v("组合满足结合律。"),a("code",[s._v("f • (g • h)")]),s._v(" 与 "),a("code",[s._v("(f • g) • h")]),s._v(" 是等价的。")])]),s._v(" "),a("p",[s._v("由于这些准则是在非常抽象的层面控制着组合方式，因此范畴论对于发现组合的新方法来说是伟大的。")]),s._v(" "),a("h4",{attrs:{id:"进一步阅读-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进一步阅读-2"}},[s._v("#")]),s._v(" 进一步阅读")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Category Theory for Programmers"),a("OutboundLink")],1)])]),s._v(" "),a("h2",{attrs:{id:"值-value"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#值-value"}},[s._v("#")]),s._v(" 值 (Value)")]),s._v(" "),a("p",[s._v("任何可以赋给变量的东西叫做值。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("5\nObject.freeze({name: 'John', age: 30})\n;(a) => a\n;[1]\nundefined\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh/blob/master/demos/value.js",target:"_blank",rel:"noopener noreferrer"}},[s._v("示例"),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"常量-constant"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常量-constant"}},[s._v("#")]),s._v(" 常量 (Constant)")]),s._v(" "),a("p",[s._v("一旦被定义之后就不可以被重新赋值。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const five = 5\nconst john = Object.freeze({name: 'John', age: 30})\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("常量是"),a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#referential-transparency",target:"_blank",rel:"noopener noreferrer"}},[s._v("引用透明"),a("OutboundLink")],1),s._v("的，也就是说，它们可以被它们所代表的值替代而不影响结果。")]),s._v(" "),a("p",[s._v("对于以上两个常量，以下语句总会返回 true。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("john.age + five === ({name: 'John', age: 30}).age + (5)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh/blob/master/demos/constant.js",target:"_blank",rel:"noopener noreferrer"}},[s._v("示例"),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"函子-functor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函子-functor"}},[s._v("#")]),s._v(" 函子 (Functor)")]),s._v(" "),a("p",[s._v("函子是一个实现了 "),a("code",[s._v("map")]),s._v(" 函数的对象。"),a("code",[s._v("map")]),s._v(" 函数会遍历对象中的每个值并生成一个新的对象�，遵守两个准则:")]),s._v(" "),a("h3",{attrs:{id:"一致性-preserves-identity"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一致性-preserves-identity"}},[s._v("#")]),s._v(" 一致性 (Preserves identity)")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("object.map(x => x) ≍ object\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"组合性-composable"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组合性-composable"}},[s._v("#")]),s._v(" 组合性 (Composable)")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("object.map(compose(f, g)) ≍ object.map(g).map(f)  // f, g 为任意函数\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("("),a("code",[s._v("f")]),s._v(", "),a("code",[s._v("g")]),s._v(" 是任意的函数)")]),s._v(" "),a("p",[s._v("在 javascript 中一个常见的函子是 Array, 因为它遵守因子的两个准则。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const f = x => x + 1\nconst g = x => x * 2\n\n;[1, 2, 3].map(x => f(g(x)))\n;[1, 2, 3].map(g).map(f)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh/blob/master/demos/functor.js",target:"_blank",rel:"noopener noreferrer"}},[s._v("示例"),a("OutboundLink")],1)]),s._v(" "),a("h3",{attrs:{id:"指向函子-pointed-functor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指向函子-pointed-functor"}},[s._v("#")]),s._v(" 指向函子 (Pointed Functor)")]),s._v(" "),a("p",[s._v("一个对象，拥有一个"),a("code",[s._v("of")]),s._v("函数，可以将一个任何值放入它自身。")]),s._v(" "),a("p",[s._v("ES2015 添加了 "),a("code",[s._v("Array.of")]),s._v("，使 Array 成为了 Pointed Functor。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Array.of(1)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h2",{attrs:{id:"抬升-lift"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#抬升-lift"}},[s._v("#")]),s._v(" 抬升 (Lift)")]),s._v(" "),a("p",[s._v("抬升是指将一个值放进一个对象（如"),a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#functor",target:"_blank",rel:"noopener noreferrer"}},[s._v("函子"),a("OutboundLink")],1),s._v("）中。如果你将一个函数抬升到一个"),a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#applicative-functor",target:"_blank",rel:"noopener noreferrer"}},[s._v("应用函子"),a("OutboundLink")],1),s._v("中，那么就可以将它作用于该函子中的值。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const liftA2 = (f) => (a, b) => a.map(f).ap(b) // 注意这里是 ap 而不是 map.\n\nconst mult = a => b => a * b\n\nconst liftedMult = liftA2(mult) // 这个函数现在可以作用于函子，如Array\n\nliftedMult([1, 2], [3]) // [3, 6]\nliftA2(a => b => a + b)([1, 2], [3, 4]) // [4, 5, 5, 6]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("抬升并应用一个单参数的函数的作用等同于 "),a("code",[s._v("map")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const increment = (x) => x + 1\n\nlift(increment)([2]) // [3]\n;[2].map(increment) // [3]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h2",{attrs:{id:"引用透明性-referential-transparency"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引用透明性-referential-transparency"}},[s._v("#")]),s._v(" 引用透明性 (Referential Transparency)")]),s._v(" "),a("p",[s._v("如果一个表达式能够被它的值替代而不改变程序的行为，则它是引用透明的。")]),s._v(" "),a("p",[s._v("例如我们有 greet 函数：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const greet = () => 'hello, world.'\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("任何对 "),a("code",[s._v("greet()")]),s._v(" 的调用都可以被替换为 "),a("code",[s._v("Hello World!")]),s._v(", 因此 greet 是引用透明的。")]),s._v(" "),a("h2",{attrs:{id:"等式推理-equational-reasoning"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#等式推理-equational-reasoning"}},[s._v("#")]),s._v(" 等式推理 (Equational Reasoning)")]),s._v(" "),a("p",[s._v("当一个应用程序由表达式组成并且没有副作用时，我们可以从这些组成部分中得知系统的真相。")]),s._v(" "),a("h2",{attrs:{id:"lambda"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lambda"}},[s._v("#")]),s._v(" Lambda")]),s._v(" "),a("p",[s._v("一种可以被视作一个值的匿名函数。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v(";(function (a) {\n    return a + 1\n})\n\n;(a) => a + 1\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("Lambda 通常作为参数被传递给高阶函数。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("[1, 2].map((a) => a + 1)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("可以把 Lambda 赋值给一个变量。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const add1 = (a) => a + 1\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h2",{attrs:{id:"lambda演算-lambda-calculus"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lambda演算-lambda-calculus"}},[s._v("#")]),s._v(" Lambda演算 (Lambda Calculus)")]),s._v(" "),a("p",[s._v("数学的一个分支，使用函数创造 "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Lambda_calculus",target:"_blank",rel:"noopener noreferrer"}},[s._v("通用计算模型"),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"惰性求值-lazy-evaluation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#惰性求值-lazy-evaluation"}},[s._v("#")]),s._v(" 惰性求值 (Lazy evaluation)")]),s._v(" "),a("p",[s._v("惰性求值是一种按需调用的求值机制，它将表达式的求值延迟到需要它的值为止，在函数式语言中，允许类似无限列表这样的结构存在，而这在非常重视命令顺序的命令式语言中通常是不可用的。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const rand = function* () {\n  while (true) {\n    yield Math.random()  \n  } \n}\n\nconst randIter = rand()\nrandIter.next() // 每次执行产生一个随机值，表达式会在需要时求值。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh/blob/master/demos/functor.js",target:"_blank",rel:"noopener noreferrer"}},[s._v("示例"),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"幺半群-monoid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#幺半群-monoid"}},[s._v("#")]),s._v(" 幺半群 (Monoid)")]),s._v(" "),a("p",[s._v('一个对象，它拥有一个函数，这个函数用来与另一个相同类型的对象"结合"。对象的类型（'),a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#semigroup",target:"_blank",rel:"noopener noreferrer"}},[s._v("半群"),a("OutboundLink")],1),s._v('）必须具有一个"identity"值。')]),s._v(" "),a("p",[s._v("数值加法是一个简单的幺半群:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("1 + 1   // 2\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("以上示例中，数是对象而 "),a("code",[s._v("+")]),s._v(" 是函数。")]),s._v(" "),a("p",[s._v('当任何一个值与"identity"值结合时，结果一定是原始的值。"identity"也是可换位的（即排列次序不影响结果）。')]),s._v(" "),a("p",[s._v("加法的特征值是 0。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("1 + 0   // 1\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("操作的组合不会影响结果（必须满足结合律）:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("1 + (2 + 3) === (1 + 2) + 3 // true\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("数组的结合也是幺半群:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v(";[1, 2].concat([3, 4]) // [1, 2, 3, 4]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("code",[s._v("identity")]),s._v(" 值为空数组")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v(";[1, 2].concat([])\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v('减法作为一个反例，不形成幺半群，因为不存在可以换位的"identity"值。')]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("0 - 4 === 4 - 0 // false\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh/blob/master/demos/monoid.js",target:"_blank",rel:"noopener noreferrer"}},[s._v("示例"),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"单子-monad"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单子-monad"}},[s._v("#")]),s._v(" 单子 (Monad)")]),s._v(" "),a("p",[s._v("拥有 "),a("code",[s._v("of")]),s._v(" 和 "),a("code",[s._v("chain")]),s._v(" 函数的对象即为单子。"),a("code",[s._v("chain")]),s._v(" 很像 "),a("code",[s._v("map")]),s._v("， 不同的是它可以展平嵌套数据。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Array.prototype.chain = function (f) {\n  return this.reduce((acc, it) => acc.concat(f(it)), [])  \n}\n\n// 使用\n;Array.of('cat,dog', 'fish,bird').chain(s => s.split(',')) // ['cat', 'dog', 'fish', 'bird']\n\n// 和 map 相比\n;Array.of('cat,dog', 'fish,bird').map(s => s.split(',')) // [['cat', 'dog'], ['fish', 'bird']]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("在有些函数式语言中，"),a("code",[s._v("of")]),s._v(" 也称为 "),a("code",[s._v("return")]),s._v("，"),a("code",[s._v("chain")]),s._v(" 也称为 "),a("code",[s._v("flatmap")]),s._v(" 与 "),a("code",[s._v("bind")]),s._v("。")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh/blob/master/demos/monad.js",target:"_blank",rel:"noopener noreferrer"}},[s._v("示例"),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"余单子-comonad"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#余单子-comonad"}},[s._v("#")]),s._v(" 余单子 (Comonad)")]),s._v(" "),a("p",[s._v("拥有 "),a("code",[s._v("extract")]),s._v(" 与 "),a("code",[s._v("extend")]),s._v(" 函数的对象。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const CoIdentity = (v) => ({\n  val: v,\n  extract () {\n    return this.val  \n  },\n  extend (f) {\n    return CoIdentity(f(this))  \n  }\n})\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("Extract 将值从余单子中取出。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("CoIdentity(1).extract() // 1\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("Extends 在余单子上运行一个函数。这个函数会返回和余单子相同的类型。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("CoIdentity(1).extend(x => x.extract() + 1) // CoIdentity(2)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh/blob/master/demos/comonad.js",target:"_blank",rel:"noopener noreferrer"}},[s._v("示例"),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"应用函子-applicative-functor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应用函子-applicative-functor"}},[s._v("#")]),s._v(" 应用函子 (Applicative Functor)")]),s._v(" "),a("p",[s._v("一个拥有 "),a("code",[s._v("ap")]),s._v(" 函数的对象称为应用函子。"),a("code",[s._v("ap")]),s._v(" 将对象中的函数应用于另一个同样类型的对象中的值。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 实现\nArray.prototype.ap = function (xs) {\n    return this.reduce((acc, f) => acc.concat(xs.map(f)), [])\n}\n\n// 示例\n;[(a) => a + 1].ap([1]) // [2]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("如果你有两个对象，并需要对他们的元素执行一个二元函数，这将会很有用。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 你想要组合的两个数组\nconst arg1 = [1, 3]\nconst arg2 = [4, 5]\n\n// 组合函数 - 必须要柯里化\nconst add = (x) => (y) => x + y\n\nconst partiallyAppliedAdds = [add].ap(arg1) // [(y) => 1 + y, (y) => 3 + y]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("由此得到了一个函数数组，并且可以调用 "),a("code",[s._v("ap")]),s._v(" 函数得到结果。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("partiallyAppliedAdds.ap(arg2) // [5, 6, 7, 8]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh/blob/master/demos/applicativeFunctor.js",target:"_blank",rel:"noopener noreferrer"}},[s._v("示例"),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"态射-morphism"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#态射-morphism"}},[s._v("#")]),s._v(" 态射 (Morphism)")]),s._v(" "),a("p",[s._v("一个变形函数。")]),s._v(" "),a("h3",{attrs:{id:"endomorphism-自同态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#endomorphism-自同态"}},[s._v("#")]),s._v(" Endomorphism (自同态)")]),s._v(" "),a("p",[s._v("输入输出是相同类型的函数。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// uppercase :: String -> String\nconst uppercase = (str) => str.toUpperCase()\n\n// decrement :: Number -> Number\nconst decrement = (x) => x - 1\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h3",{attrs:{id:"isomorphism-同构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#isomorphism-同构"}},[s._v("#")]),s._v(" Isomorphism (同构)")]),s._v(" "),a("p",[s._v("两个不用类型的对象之间的变换，保持结构并且不丢失数据。")]),s._v(" "),a("p",[s._v("例如，一个二维坐标既可以表示为数组 "),a("code",[s._v("[2, 3]")]),s._v("，也可以表示为对象 "),a("code",[s._v("{x: 2, y: 3}")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 提供函数在两种类型间互相转换\nconst pairToCoords = (pair) => ({x: pair[0], y: pair[1]})\n\nconst coordsToPair = (coords) => [coords.x, coords.y]\n\ncoordsToPair(pairToCoords([1, 2])) // [1, 2]\n\npairToCoords(coordsToPair({x: 1, y: 2})) // {x: 1, y: 2}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h3",{attrs:{id:"homomorphism-同态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#homomorphism-同态"}},[s._v("#")]),s._v(" Homomorphism (同态)")]),s._v(" "),a("p",[s._v("同态只是一个保持结构的映射，实际上，函子只是"),a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#category",target:"_blank",rel:"noopener noreferrer"}},[s._v("范畴"),a("OutboundLink")],1),s._v("之间的同态，因为它在映射下保持了原范畴的结构。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('A.of(f).ap(A.of(x)) == A.of(f(x))\n\nEither.of(_.toUpper).ap(Either.of("oreos")) == Either.of(_.toUpper("oreos"))\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"catamorphism"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#catamorphism"}},[s._v("#")]),s._v(" Catamorphism")]),s._v(" "),a("p",[s._v("一个 "),a("code",[s._v("reduceRight")]),s._v(" 函数，它应用于累加器(accumulator)和数组中的每个值（从右到左），来将其缩减为一个单一的值。")]),s._v(" "),a("h3",{attrs:{id:"anamorphism"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#anamorphism"}},[s._v("#")]),s._v(" Anamorphism")]),s._v(" "),a("p",[s._v("一个 "),a("code",[s._v("unfold")]),s._v(" 函数。"),a("code",[s._v("unfold")]),s._v(" 是 "),a("code",[s._v("fold")]),s._v("（"),a("code",[s._v("ruduce")]),s._v("）的反面。它从一个值生成一个列表。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const unfold = (f, seed) => {\n  function go(f, seed, acc) {\n    const res = f(seed);\n    return res ? go(f, res[1], acc.concat([res[0]])) : acc;\n  }\n  return go(f, seed, [])\n}\nconst countDown = n => unfold((n) => {\n  return n <= 0 ? undefined : [n, n - 1]\n}, n)\n\ncountDown(5) // [5, 4, 3, 2, 1]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("h3",{attrs:{id:"hylomorphism"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hylomorphism"}},[s._v("#")]),s._v(" Hylomorphism")]),s._v(" "),a("p",[s._v("Anamorphism 和 catamorphism 的结合。")]),s._v(" "),a("h3",{attrs:{id:"paramorphism"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#paramorphism"}},[s._v("#")]),s._v(" Paramorphism")]),s._v(" "),a("p",[s._v("一类类似于 "),a("code",[s._v("reduceRight")]),s._v(" 的函数，不过还是有区别的：")]),s._v(" "),a("p",[s._v("在Paramorphism中，reducer的参数是当前的值、所有先前的值的缩减(reduction，即reduce的结果)、以及形成该缩减的值的列表。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 包含 undefined 对于列表来说显然是不安全的，\n// 但是足以说明问题。\nconst para = (reducer, accumulator, elements) => {\n  if (elements.length === 0)\n    return accumulator\n\n  const head = elements[0]\n  const tail = elements.slice(1)\n\n  return reducer(head, tail, para(reducer, accumulator, tail))\n}\n\nconst suffixes = list => para(\n  (x, xs, suffxs) => [xs, ... suffxs],\n  [],\n  list\n)\n\nsuffixes([1, 2, 3, 4, 5]) // [[2, 3, 4, 5], [3, 4, 5], [4, 5], [5], []]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("p",[s._v("上面的例子中的 reducer（"),a("code",[s._v("[x, ... xs]")]),s._v('）的第三个参数有点像一个"如何达到你当前的 acc 值"的历史记录。')]),s._v(" "),a("h3",{attrs:{id:"apomorphism"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#apomorphism"}},[s._v("#")]),s._v(" Apomorphism")]),s._v(" "),a("p",[s._v("paramorphism 的反面。就像 anamorphism 是 catamorphism 的反面一样。对于 paramorphism，我们结合了对累加器的访问和已经累加的东西，而apomorphism让我们可以 unfold（展开）并且具有提早return的可能性。")]),s._v(" "),a("h2",{attrs:{id:"setoid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setoid"}},[s._v("#")]),s._v(" Setoid")]),s._v(" "),a("p",[s._v("拥有 "),a("code",[s._v("equals")]),s._v(" 函数的对象。"),a("code",[s._v("equals")]),s._v(" 可以用来和其它相同类型的对象比较。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Array.prototype.equals = function (arr) {\n  const len = this.length\n  if (len !== arr.length) {\n    return false\n  }\n  for (let i = 0; i < len; i++) {\n    if (this[i] !== arr[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n;[1, 2].equals([1, 2])   // true\n;[1, 2].equals([3, 4])   // false\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh/blob/master/demos/setoid.js",target:"_blank",rel:"noopener noreferrer"}},[s._v("示例"),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"半群-semigroup"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#半群-semigroup"}},[s._v("#")]),s._v(" 半群 (Semigroup)")]),s._v(" "),a("p",[s._v("一个拥有 "),a("code",[s._v("concat")]),s._v(" 函数的对象。"),a("code",[s._v("concat")]),s._v(" 可以连接相同类型的两个对象。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v(";[1].concat([2]) // [1, 2]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh/blob/master/demos/semigroup.js",target:"_blank",rel:"noopener noreferrer"}},[s._v("示例"),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"可折叠性-foldable"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可折叠性-foldable"}},[s._v("#")]),s._v(" 可折叠性 (Foldable)")]),s._v(" "),a("p",[s._v("一个拥有 "),a("code",[s._v("reduce")]),s._v(" 函数的对象具有可折叠性。"),a("code",[s._v("reduce")]),s._v(" 可以把一种类型的对象转化为另一种类型。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const sum = (list) => list.reduce((acc, val) => acc + val, 0)\nsum([1, 2, 3])        // 6\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h2",{attrs:{id:"透镜-lens"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#透镜-lens"}},[s._v("#")]),s._v(" 透镜 (Lens)")]),s._v(" "),a("p",[s._v("Lens是一种结构（通常是一个对象或者函数），他为其他数据结构对 getter 和非可变的 setter 进行配对。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 使用 [Ramda's lens](http://ramdajs.com/docs/#lens)\nconst nameLens = R.lens(\n  // 一个对象的 name 属性的 getter\n  (obj) => obj.name,\n  // name 属性的 setter\n  (val, obj) => Object.assign({}, obj, {name: val})\n)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("为给定的数据结构设置 "),a("code",[s._v("get")]),s._v(" 和 "),a("code",[s._v("set")]),s._v(" 可以实现一些关键特性。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const person = {name: 'Gertrude Blanch'}\n\n// 调用 getter\nR.view(nameLens, person) // 'Gertrude Blanch'\n\n// 调用 setter\nR.set(nameLens, 'Shafi Goldwasser', person) // {name: 'Shafi Goldwasser'}\n\n// 将函数应用于结构中的值\nR.over(nameLens, uppercase, person) // {name: 'GERTRUDE BLANCH'}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("lens 也是可以组合的。这让我们可以对深度嵌套的数据进行简单的不可变更新。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 这个 lens 关注一个非空数组中的第一个元素\nconst firstLens = R.lens(\n  // 获取数组的第一个元素\n  xs => xs[0],\n  // 数组的第一个元素的非可变 setter\n  (val, [__, ...xs]) => [val, ...xs]\n)\n\nconst people = [{name: 'Gertrude Blanch'}, {name: 'Shafi Goldwasser'}]\n\n// 无论你怎么想，lens 是从左到右合成的\nR.over(compose(firstLens, nameLens), uppercase, people) // [{'name': 'GERTRUDE BLANCH'}, {'name': 'Shafi Goldwasser'}]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("其他实现:")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/calmm-js/partial.lenses",target:"_blank",rel:"noopener noreferrer"}},[s._v("partial.lenses"),a("OutboundLink")],1),s._v(' - "好吃"的语法糖和很多强大功能')]),s._v(" "),a("p",[a("a",{attrs:{href:"http://www.kovach.me/nanoscope/",target:"_blank",rel:"noopener noreferrer"}},[s._v("nanoscope"),a("OutboundLink")],1),s._v(" - 流畅接口")]),s._v(" "),a("h2",{attrs:{id:"类型签名-type-signatures"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型签名-type-signatures"}},[s._v("#")]),s._v(" 类型签名 (Type Signatures)")]),s._v(" "),a("p",[s._v("通常 js 中的函数会在注释中指出参数与返回值的类型。")]),s._v(" "),a("p",[s._v("在整个社区内存在很大的差异，但通常遵循以下模式：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// functionName :: firstArgType -> secondArgType -> returnType\n\n// add :: Number -> Number -> Number\nconst add = (x) => (y) => x + y\n\n// increment :: Number -> Number\nconst increment = (x) => x + 1\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("如果函数接受其他函数作为参数，那么这个函数需要用括号括起来。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// call :: (a -> b) -> a -> b\nconst call = (f) => (x) => f(x)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("字符 "),a("code",[s._v("a")]),s._v(", "),a("code",[s._v("b")]),s._v(", "),a("code",[s._v("c")]),s._v(", "),a("code",[s._v("d")]),s._v(" 表明参数可以是任意类型。以下版本的 "),a("code",[s._v("map")]),s._v(" 的函数类型的参数 "),a("code",[s._v("f")]),s._v("，把一种类型 "),a("code",[s._v("a")]),s._v(" 的数组转化为另一种类型 "),a("code",[s._v("b")]),s._v(" 的数组。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// map :: (a -> b) -> [a] -> [b]\nconst map = (f) => (list) => list.map(f)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("进一步阅读：")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/ramda/ramda/wiki/Type-Signatures",target:"_blank",rel:"noopener noreferrer"}},[s._v("Ramda's type signatures"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://stackoverflow.com/questions/399312/what-is-hindley-milner/399392#399392",target:"_blank",rel:"noopener noreferrer"}},[s._v("What is Hindley-Milner?"),a("OutboundLink")],1),s._v(" on Stack Overflow")])]),s._v(" "),a("h2",{attrs:{id:"代数数据类型-algebraic-data-type"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代数数据类型-algebraic-data-type"}},[s._v("#")]),s._v(" 代数数据类型 (Algebraic data type)")]),s._v(" "),a("p",[s._v("一种由其他类型组合而成的复合类型。两种常见的代数类型是"),a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#sum-type",target:"_blank",rel:"noopener noreferrer"}},[s._v("sum"),a("OutboundLink")],1),s._v("和"),a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#product-type",target:"_blank",rel:"noopener noreferrer"}},[s._v("product"),a("OutboundLink")],1),s._v("。")]),s._v(" "),a("h3",{attrs:{id:"和类型-sum-type"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#和类型-sum-type"}},[s._v("#")]),s._v(" 和类型 (Sum type)")]),s._v(" "),a("p",[s._v("和类型是将两种类型组合成另一种类型。之所以称为和，是因为结果类型的可能的值的数目是两种输入类型的值的数目的和。")]),s._v(" "),a("p",[s._v("js 中没有这种类型，但是我们可以用 set 来假装：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 想象这些不是 set，而是仅包含这些值的某种类型。\nconst bools = new Set([true, false])\nconst halfTrue = new Set(['half-true'])\n\n// 这个 weakLogic 类型包含 bools 类型和 halfTrue 类型的和。\nconst weakLogicValues = new Set([...bools, ...halfTrue])\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("和类型有时也称作联合类型（union type）、区分联合（discriminated union）或标记联合（tagged unions）。")]),s._v(" "),a("p",[s._v("JS中有一些库可以帮助定义和使用联合类型。")]),s._v(" "),a("p",[s._v("流（flow）包括联合类型，而TypeScript具有提供相同能力的枚举（enum）。")]),s._v(" "),a("h3",{attrs:{id:"product-type"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#product-type"}},[s._v("#")]),s._v(" Product type")]),s._v(" "),a("p",[s._v("用一种你可能更熟悉的方式把数据类型联合起来:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// point :: (Number, Number) -> {x: Number, y: Number}\nconst point = (x, y) => ({x: x, y: y})\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("之所以称之为积，是因为数据结构的总的可能值是不同值的乘积。许多语言都有 tuple 类型，这是积类型的最简单形式。")]),s._v(" "),a("p",[s._v("另见 "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Set_theory",target:"_blank",rel:"noopener noreferrer"}},[s._v("Set theory"),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"可选类型-option"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可选类型-option"}},[s._v("#")]),s._v(" 可选类型 (Option)")]),s._v(" "),a("p",[s._v("Option 是一种联合类型，它有两种情况，"),a("code",[s._v("Some")]),s._v(" 或者 "),a("code",[s._v("None")]),s._v("。")]),s._v(" "),a("p",[s._v("Option对于一些可能不会返回值的组合函数非常有用。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 简单的定义\nconst Some = (v) => ({\n  val: v,\n  map (f) {\n    return Some(f(this.val))\n  },\n  chain (f) {\n    return f(this.val)\n  }\n})\n\nconst None = () => ({\n  map (f) {\n    return this\n  },\n  chain (f) {\n    return this\n  }\n})\n\n// maybeProp :: (String, {a}) -> Option a\nconst maybeProp = (key, obj) => typeof obj[key] === 'undefined' ? None() : Some(obj[key])\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br")])]),a("p",[s._v("使用 "),a("code",[s._v("chain")]),s._v(" 可以序列化返回 "),a("code",[s._v("Option")]),s._v(" 的函数。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// getItem :: Cart -> Option CartItem\nconst getItem = (cart) => maybeProp('item', cart)\n\n// getPrice :: Item -> Option Number\nconst getPrice = (item) => maybeProp('price', item)\n\n// getNestedPrice :: cart -> Option a\nconst getNestedPrice = (cart) => getItem(obj).chain(getPrice)\n\ngetNestedPrice({}) // None()\ngetNestedPrice({item: {foo: 1}}) // None()\ngetNestedPrice({item: {price: 9.99}}) // Some(9.99)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("在其它的一些地方，"),a("code",[s._v("Option")]),s._v(" 也称为 "),a("code",[s._v("Maybe")]),s._v("，"),a("code",[s._v("Some")]),s._v(" 也称为 "),a("code",[s._v("Just")]),s._v("，"),a("code",[s._v("None")]),s._v(" 也称为 "),a("code",[s._v("Nothing")]),s._v("。")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh/blob/master/demos/option.js",target:"_blank",rel:"noopener noreferrer"}},[s._v("示例 option.js"),a("OutboundLink")],1),s._v(" "),a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh/blob/master/demos/maybe.js",target:"_blank",rel:"noopener noreferrer"}},[s._v("示例 maybe.js"),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"function"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function"}},[s._v("#")]),s._v(" Function")]),s._v(" "),a("p",[s._v("一个函数 "),a("code",[s._v("f :: A => B")]),s._v(" 是一个表达式，通常称为 arrow 或者 lambda 表达式——只能有"),a("strong",[s._v("一个")]),s._v("（这点是不可变的）的 "),a("code",[s._v("A")]),s._v(" 类型参数和"),a("strong",[s._v("一个")]),s._v(" "),a("code",[s._v("B")]),s._v(" 类型返回值。该返回值完全取决于参数，使函数独立于上下文，或者说"),a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#referential-transparency",target:"_blank",rel:"noopener noreferrer"}},[s._v("引用透明"),a("OutboundLink")],1),s._v("。这里暗示的是一个函数不能产生任何隐藏的"),a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#side-effects",target:"_blank",rel:"noopener noreferrer"}},[s._v("副作用"),a("OutboundLink")],1),s._v("——根据定义，函数总是"),a("a",{attrs:{href:"https://github.com/shfshanyue/fp-jargon-zh#purity",target:"_blank",rel:"noopener noreferrer"}},[s._v("纯"),a("OutboundLink")],1),s._v("的。这些属性使函数易于使用：它们是完全确定的，因此也是可以预测的。函数可以将代码作为数据进行处理，对行为进行抽象：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// times2 :: Number -> Number\nconst times2 = n => n * 2\n\n[1, 2, 3].map(times2) // [2, 4, 6]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h2",{attrs:{id:"偏函数-partial-function"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#偏函数-partial-function"}},[s._v("#")]),s._v(" 偏函数 (Partial function)")]),s._v(" "),a("p",[s._v("偏函数是没有为全部参数定义的函数——它可能返回意料之外的结果或者永远不会终止。偏函数增加了认知开销，它们更难推理，并可能导致运行时错误。一些例子：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 例1: 列表的和\n// sum :: [Number] -> Number\nconst sum = arr => arr.reduce((a, b) => a + b)\nsum([1, 2, 3]) // 6\nsum([]) // TypeError: Reduce of empty array with no initial value\n\n// 例2: 获取列表的第一个值\n// first :: [A] -> A\nconst first = a => a[0]\nfirst([42]) // 42\nfirst([]) // undefined\n// 甚至更糟: \nfirst([[42]])[0] // 42\nfirst([])[0] // Uncaught TypeError: Cannot read property '0' of undefined\n\n// 例3: 将函数重复 N 次\n// times :: Number -> (Number -> Number) -> Number\nconst times = n => fn => n && (fn(n), times(n - 1)(fn))\ntimes(3)(console.log)\n// 3\n// 2\n// 1\ntimes(-1)(console.log)\n// RangeError: Maximum call stack size exceeded\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br")])]),a("h3",{attrs:{id:"处理偏函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#处理偏函数"}},[s._v("#")]),s._v(" 处理偏函数")]),s._v(" "),a("p",[s._v("偏函数是危险的，它们需要被非常谨慎地对待。你可能会得到意料之外的（错误的）结果或遇到运行时错误。有时偏函数可能根本不会返回。意识到并相应地处理所有这些边缘情况可能会变得非常乏味。幸运的是，部分函数可以转换为常规函数。我们可以提供默认值或使用 guard 来处理偏函数未定义的输入。利用 option 类型，我们可以在可能会出现意外行为的地方使用 yield "),a("code",[s._v("Some(value)")]),s._v(" 或 "),a("code",[s._v("None")]),s._v(":")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 例1: 列表的和\n// 我们可以提供默认值，使它总会返回结果\n// sum :: [Number] -> Number\nconst sum = arr => arr.reduce((a, b) => a + b, 0)\nsum([1, 2, 3]) // 6\nsum([]) // 0\n\n// 例2: 获取列表的第一个值\n// 将结果改为 Option\n// first :: [A] -> A\nconst first = a => a.length ? Some(a[0]) : None()\nfirst([42]).map(a => console.log(a)) // 42\nfirst([]).map(a => console.log(a)) // console.log 不会执行\n//我们之前的糟糕情况\nfirst([[42]]).map(a => console.log(a[0])) // 42\nfirst([]).map(a => console.log(a[0])) // 不会执行，所以不会有 error\n// 更重要的是，通过返回类型 (Option) ，我们会知道：\n// 我们应该使用 .map 方法来访问数据，所以我们不会忘记检查输入，\n// 因为这样的检查会被内建在函数中。\n\n// 例3: 将函数重复 N 次\n// 我们需要通过改变条件来确保函数总会终止: \n// times :: Number -> (Number -> Number) -> Number\nconst times = n => fn => n > 0 && (fn(n), times(n - 1)(fn))\ntimes(3)(console.log)\n// 3\n// 2\n// 1\ntimes(-1)(console.log)\n// 不会再执行\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br")])]),a("p",[s._v('将偏函数改成全函数可以防止此类运行时错误。总是返回一个"值"也会使得代码更容易维护和推理。')]),s._v(" "),a("h2",{attrs:{id:"在-js-中的函数式编程库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在-js-中的函数式编程库"}},[s._v("#")]),s._v(" 在 js 中的函数式编程库")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/swannodette/mori",target:"_blank",rel:"noopener noreferrer"}},[s._v("mori"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/facebook/immutable-js/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Immutable"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/immerjs/immer",target:"_blank",rel:"noopener noreferrer"}},[s._v("Immer"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/ramda/ramda",target:"_blank",rel:"noopener noreferrer"}},[s._v("Ramda"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/char0n/ramda-adjunct",target:"_blank",rel:"noopener noreferrer"}},[s._v("ramda-adjunct"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"http://folktalejs.org/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Folktale"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://cwmyers.github.io/monet.js/",target:"_blank",rel:"noopener noreferrer"}},[s._v("monet.js"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/lodash/lodash",target:"_blank",rel:"noopener noreferrer"}},[s._v("lodash"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/jashkenas/underscore",target:"_blank",rel:"noopener noreferrer"}},[s._v("Underscore.js"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/dtao/lazy.js",target:"_blank",rel:"noopener noreferrer"}},[s._v("Lazy.js"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/sjsyrek/maryamyriameliamurphies.js",target:"_blank",rel:"noopener noreferrer"}},[s._v("maryamyriameliamurphies.js"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/casualjavascript/haskell-in-es6",target:"_blank",rel:"noopener noreferrer"}},[s._v("Haskell in ES6"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/sanctuary-js/sanctuary",target:"_blank",rel:"noopener noreferrer"}},[s._v("Sanctuary"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/evilsoft/crocks",target:"_blank",rel:"noopener noreferrer"}},[s._v("Crocks"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/fluture-js/Fluture",target:"_blank",rel:"noopener noreferrer"}},[s._v("Fluture"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/gcanti/fp-ts",target:"_blank",rel:"noopener noreferrer"}},[s._v("fp-ts"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=r.exports}}]);
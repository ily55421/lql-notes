(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{405:function(v,_,t){"use strict";t.r(_);var s=t(0),a=Object(s.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"一次搞定计算机网络"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#一次搞定计算机网络"}},[v._v("#")]),v._v(" 一次搞定计算机网络")]),v._v(" "),_("h3",{attrs:{id:"为什么要学习计算机网络"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#为什么要学习计算机网络"}},[v._v("#")]),v._v(" 为什么要学习计算机网络")]),v._v(" "),_("p",[v._v("网络是一种工作技能，我需要通过几个网络知识的问答，确认求职者未来是否会给我带来很大“麻烦”\n"),_("strong",[v._v("一名程序员，无论是应对日常开发、日常排查，还是解决突发的网络问题（网络调试、网络优化）都离不开计算机网络")]),v._v("。\n而"),_("strong",[v._v("要想成为优秀的工程师、架构师，朝着更高阶、更高薪的岗位去晋升")]),v._v("，补足编程必备基础知识——"),_("strong",[v._v("计算机网络是绕不过去的一关")]),v._v("。")]),v._v(" "),_("p",[v._v("其实计网不是难，而是知识点太多！"),_("strong",[v._v("系统性地学习计网需要花很多时间，直接看面试题的解答又不能理解其精髓。")]),v._v(" 因此，很多概念往往需要反反复复学习。这就导致你时常陷入一个时间黑洞，重复学习却仍然不会解决工作中遇到的常见问题和应对面试。")]),v._v(" "),_("p",[v._v("所以我觉得，"),_("strong",[v._v("你确实有必要拿出一小部分时间，补足计算机网络这块知识")]),v._v("。")]),v._v(" "),_("h4",{attrs:{id:"第一个维度-网络的基础结构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#第一个维度-网络的基础结构"}},[v._v("#")]),v._v(" 第一个维度：网络的基础结构")]),v._v(" "),_("p",[v._v("这块内容是为了带你了解计算机网络的生态和基础设施。")]),v._v(" "),_("h4",{attrs:{id:"第二个维度-工作原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#第二个维度-工作原理"}},[v._v("#")]),v._v(" 第二个维度：工作原理")]),v._v(" "),_("p",[v._v("这块内容将介绍网络的工作原理，里面会涉及一些算法问题，比如滑动窗口、路由和寻址。")]),v._v(" "),_("p",[v._v("还会涉及细节问题，比如讲解一些封包格式，但更多的是让你理解网络的工作原理，比如多路复用、缓存设计、Socket、I/O 模型等。")]),v._v(" "),_("p",[_("strong",[v._v("有同学说，网络库一大堆，用就好了，还有必要理解原理吗？是啊，年轻的“萌新”可能都有这个想法。")]),v._v(" "),_("strong",[v._v("大家都使用网络库，但是如何根据自己的业务场景、网络特性、I/O 特性、计算资源特性，优化网络，这就需要你了解网络的工作原理了")]),v._v("。")]),v._v(" "),_("h2",{attrs:{id:"计算机领域的基础"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#计算机领域的基础"}},[v._v("#")]),v._v(" 计算机领域的基础")]),v._v(" "),_("p",[_("strong",[v._v("计算机领域也是一样，上下文指的是计算的背景和环境")]),v._v("。程序员写"),_("strong",[v._v("程序")]),v._v("，程序经过编译后变成"),_("strong",[v._v("应用")]),v._v("，应用执行起来就是"),_("strong",[v._v("进程")]),v._v("。\n用户浏览网页时看到的是图形，用鼠标点按钮的背后是"),_("strong",[v._v("显卡和中断")]),v._v("；用户以为自己每天使用的是应用，实则是进程；\n用户模糊地知道，连麦是把"),_("strong",[v._v("光电信号")]),v._v("传输过去，而程序员明确地知道，用户通过"),_("strong",[v._v("网络协议传输了二进制数据")]),v._v("；用户以为通过微信就可以直接把消息发给张三，但其实消息首先到达的是微信服务器。")]),v._v(" "),_("p",[_("strong",[v._v("程序员学好基础知识，是为了更好地开发应用、开发服务")]),v._v("。相信你也听过，大牛们常对小年轻们说，要“"),_("strong",[v._v("打牢基础")]),v._v("”，但是你现在可能还不知道所谓的基础有哪些，")]),v._v(" "),_("h3",{attrs:{id:"构成应用的-7-种基础元素"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#构成应用的-7-种基础元素"}},[v._v("#")]),v._v(" 构成应用的 7 种基础元素")]),v._v(" "),_("ol",[_("li",[v._v("计算机组成原理")]),v._v(" "),_("li",[v._v("操作系统")]),v._v(" "),_("li",[v._v("计算机网络")]),v._v(" "),_("li",[v._v("算法和数据结构")]),v._v(" "),_("li",[v._v("图形学")]),v._v(" "),_("li",[v._v("编程技巧")]),v._v(" "),_("li",[v._v("编译原理")])]),v._v(" "),_("p",[v._v("对于打基础这件事情，"),_("strong",[v._v("我真心建议你不要一上来就啃大部头书籍，而是先找到一门比经典教材浅，但又暂时够用的教程。")])]),v._v(" "),_("h2",{attrs:{id:"什么是蜂窝移动网络"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是蜂窝移动网络"}},[v._v("#")]),v._v(" 什么是蜂窝移动网络？")]),v._v(" "),_("h3",{attrs:{id:"网络的组成"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#网络的组成"}},[v._v("#")]),v._v(" 网络的组成")]),v._v(" "),_("h4",{attrs:{id:"公司内网"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#公司内网"}},[v._v("#")]),v._v(" 公司内网")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://linkeq.oss-cn-chengdu.aliyuncs.com/img/2022/07/23/Cgp9HWB5O5KAFGFAAAD-82hpYWc483-a5be5d.png",alt:"Drawing 2.png"}}),v._v("\n图 1：公司内网结构示例")]),v._v(" "),_("p",[v._v("公司网络从"),_("strong",[v._v("本地网络服务提供商 （Internet Service Provider）")]),v._v(" 接入，然后内部再分成一个个子网。上图 1 中，你看到的线路，也被称作"),_("strong",[v._v("通信链路（Communication Link）")]),v._v("，用于传输网络信号。你可以观察到，有的网络节点，同时接入了 2 条以上的链路，这个时候因为路径发生了分叉，数据传输到这些节点需要选择方向，因此我们在这些节点需要进行"),_("strong",[v._v("交换（Switch）")]),v._v("。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://linkeq.oss-cn-chengdu.aliyuncs.com/img/2022/07/23/CioPOWB5O7uAUZ7qAAB_rmbTigw120-02af3b.png",alt:"Drawing 4.png"}})]),v._v(" "),_("p",[v._v("图 2：封包交换（Packet Switch）")]),v._v(" "),_("p",[v._v("交换技术的本质，就是"),_("strong",[v._v("让数据切换路径")]),v._v("。因为，网络中的数据是以分组或封包（Packet）的形式传输，因此这个技术也称作"),_("strong",[v._v("封包交换技术（Packet Switch）")]),v._v("。")]),v._v(" "),_("p",[v._v("常见的具有交换能力的设备是"),_("strong",[v._v("路由器（Router）和链路层交换机（Link-Layer Switch）")]),v._v("。通常情况下，两个网络可以通过路由器进行连接，多台设备可以通过交换机进行连接。"),_("strong",[v._v("但是路由器通常也具有交换机的功能")]),v._v("。")]),v._v(" "),_("p",[_("strong",[v._v("局域网络之间，可以通过路由器、交换机进行连接，从而构成一个更大的局域网")]),v._v("。")]),v._v(" "),_("h4",{attrs:{id:"移动网络"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#移动网络"}},[v._v("#")]),v._v(" 移动网络")]),v._v(" "),_("p",[v._v("移动网络的设计中，通信的核心被称作"),_("strong",[v._v("蜂窝塔（Cellular Tower），有时候也称作基站（BaseStation）")]),v._v("。")]),v._v(" "),_("p",[v._v("将网络提供给一个子网的行为，通常称为"),_("strong",[v._v("网络提供（Network Provider）")]),v._v("，反过来，对一个子网连接提供商的网络，称为"),_("strong",[v._v("网络接入（Network Access）")]),v._v("。")]),v._v(" "),_("p",[v._v("一定范围内的区域，离用户较近的地方还可以部署服务器，帮助用户完成计算。这相当于计算资源的下沉，称为"),_("strong",[v._v("边缘计算")]),v._v("。")]),v._v(" "),_("h4",{attrs:{id:"家用网络"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#家用网络"}},[v._v("#")]),v._v(" 家用网络")]),v._v(" "),_("p",[v._v("现在已经发展成一种网格状的连接。一方面家用网络会通过路由器接入本地 ISP 提供的网络服务。另一方面，一些设备，比如电脑、笔记本、手机、冰箱等都可以直接和路由器连接。"),_("strong",[v._v("路由器也承担了链路层网关的作用，作为家用电器之间信息的交换设备")]),v._v("。")]),v._v(" "),_("p",[v._v("最顶部的全球或国家大型的 ISP 之间联网，构成了网络的主干。然后区域性的 ISP 承接主干网络，在这个基础之上再向家庭和公司提供接入服务。"),_("strong",[v._v("移动蜂窝网络因为部署复杂，往往也是由大型 ISP 直接提供")]),v._v("。")]),v._v(" "),_("h4",{attrs:{id:"数据的传输"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数据的传输"}},[v._v("#")]),v._v(" 数据的传输")]),v._v(" "),_("p",[v._v("最终提供服务或者享受服务的设备，称为"),_("strong",[v._v("终端（Terminal），**或者**端系统（End System）")]),v._v("，有时候简单称为"),_("strong",[v._v("主机（Host）")]),v._v("。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://linkeq.oss-cn-chengdu.aliyuncs.com/img/2022/07/23/Cgp9HWB5WbqAVlGaAHeNbdcL7hg030-f2f6b4.gif",alt:"Packet_Switching.gif"}}),v._v("\n图 9：封包交换技术")]),v._v(" "),_("h2",{attrs:{id:"tcp-为什么握手是-3-次、挥手是-4-次"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcp-为什么握手是-3-次、挥手是-4-次"}},[v._v("#")]),v._v(" TCP 为什么握手是 3 次、挥手是 4 次？")]),v._v(" "),_("p",[_("strong",[v._v("TCP（Transport Control Protocol）是一个传输层协议，提供 Host-To-Host 数据的可靠传输，支持全双工，是一个连接导向的协议")]),v._v("。")]),v._v(" "),_("h4",{attrs:{id:"主机到主机-host-to-host"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#主机到主机-host-to-host"}},[v._v("#")]),v._v(" 主机到主机（Host-To-Host）")]),v._v(" "),_("p",[_("strong",[v._v("TCP 提供的是 Host-To-Host 传输，一台主机通过 TCP 发送数据给另一台主机")]),v._v("。")]),v._v(" "),_("p",[_("strong",[v._v("TCP 协议往上是应用到应用（Application-To-Application）的协议")]),v._v("。")]),v._v(" "),_("p",[v._v("TCP 上层的应用层协议使用 TCP 能力的时候，需要告知 TCP 是哪个应用——这就是"),_("strong",[v._v("端口号")]),v._v("。"),_("strong",[v._v("端口号用于区分应用")])]),v._v(" "),_("p",[v._v("TCP 要实现主机到主机通信，就需要知道主机们的"),_("strong",[v._v("网络地址（IP 地址）")]),v._v("，但是 TCP 不负责实际地址到地址（Address-To-Address）的传输，因此 TCP 协议把 IP 地址给底层的互联网层处理。")]),v._v(" "),_("p",[_("strong",[v._v("互联网层，也叫网络层（Netowrk Layer），提供地址到地址的通信")]),v._v("，IP 协议就在这一层工作。")]),v._v(" "),_("p",[v._v("网络层会调用下方的"),_("strong",[v._v("链路层")]),v._v("在两个相邻设备间传递信息")]),v._v(" "),_("p",[v._v("5 层架构，我们称为"),_("strong",[v._v("互联网协议群")]),v._v("，也称作 "),_("strong",[v._v("TCP/IP 协议群")]),v._v("。"),_("strong",[v._v("总结下，主机到主机（Host-To-Host）为应用提供应用间通信的能力")]),v._v("。")]),v._v(" "),_("h4",{attrs:{id:"什么是连接和会话"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是连接和会话"}},[v._v("#")]),v._v(" 什么是连接和会话？")]),v._v(" "),_("p",[_("strong",[v._v("连接（Connection）——连接是数据传输双方的契约")]),v._v("。\n"),_("strong",[v._v("连接是网络行为状态的记录")]),v._v("。")]),v._v(" "),_("p",[_("strong",[v._v("会话（Session），会话是应用的行为")]),v._v("。\n"),_("strong",[v._v("总结下，会话是应用层的概念，连接是传输层的概念")]),v._v("。")]),v._v(" "),_("h4",{attrs:{id:"双工-单工问题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#双工-单工问题"}},[v._v("#")]),v._v(" 双工/单工问题")]),v._v(" "),_("p",[v._v("数据只能单向发送，就是"),_("strong",[v._v("单工")]),v._v("，所以单工需要至少一条线路。\n在某个时刻数据可以向一个方向传输，也可以向另一个方向反方向传输，而且交替进行，叫作"),_("strong",[v._v("半双工")]),v._v("\n如果任何时刻数据都可以双向收发，这就是"),_("strong",[v._v("全双工")]),v._v("，全双工需要大于 1 条线路。\n"),_("strong",[v._v("TCP 是一个双工协议，数据任何时候都可以双向传输")]),v._v("。")]),v._v(" "),_("h4",{attrs:{id:"什么是可靠性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是可靠性"}},[v._v("#")]),v._v(" 什么是可靠性？")]),v._v(" "),_("p",[_("strong",[v._v("可靠性指数据保证无损传输")]),v._v("。\n发送方同时要把消息发送给多个接收方，这种情况叫作"),_("strong",[v._v("多播")])]),v._v(" "),_("h3",{attrs:{id:"tcp-的握手和挥手"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcp-的握手和挥手"}},[v._v("#")]),v._v(" TCP 的握手和挥手")]),v._v(" "),_("p",[v._v("TCP 是一个连接导向的协议，设计有建立连接（握手）和断开连接（挥手）的过程。TCP 没有设计会话（Session），因为会话通常是一个应用的行为。\nTCP 协议有这样几个基本操作：")]),v._v(" "),_("ul",[_("li",[v._v("如果一个 Host 主动向另一个 Host 发起连接，称为 SYN（Synchronization），请求同步；")]),v._v(" "),_("li",[v._v("如果一个 Host 主动断开请求，称为 FIN（Finish），请求完成；")]),v._v(" "),_("li",[v._v("如果一个 Host 给另一个 Host 发送数据，称为 PSH（Push），数据推送。")])]),v._v(" "),_("p",[v._v("总结一下今天的重点知识。")]),v._v(" "),_("ol",[_("li",[v._v("TCP 提供连接（Connection），让双方的传输更加稳定、安全。")]),v._v(" "),_("li",[v._v("TCP 没有直接提供会话，因为应用对会话的需求多种多样，比如聊天程序会话在保持双方的聊天记录，电商程序会话在保持购物车、订单一致，所以会话通常在 TCP 连接上进一步封装，在应用层提供。")]),v._v(" "),_("li",[v._v("TCP 是一个面向连接的协议（Connection -oriented Protocol），说的就是 TCP  协议参与的双方（Host）在收发数据之前会先建立连接。后面我们还会学习 UDP 协议，UDP  是一个面向报文（Datagram-oriented）的协议——协议双方不需要建立连接，直接传送报文（数据）。")]),v._v(" "),_("li",[v._v("最后，连接需要消耗更多的资源。比如说，在传输数据前，必须先协商建立连接。因此，不是每种场景都应该用连接导向的协议。像视频播放的场景，如果使用连接导向的协议，服务端每向客户端推送一帧视频，客户端都要给服务端一次响应，这是不合理的。")])]),v._v(" "),_("p",[_("strong",[v._v("那么通过这一讲的学习，你现在可以尝试来回答本讲关联的面试题目：TCP 为什么是 3 次握手，4 次挥手？")])]),v._v(" "),_("p",[v._v("【"),_("strong",[v._v("解析")]),v._v("】TCP 是一个双工协议，为了让双方都保证，建立连接的时候，连接双方都需要向对方发送 SYC（同步请求）和 ACK（响应）。")]),v._v(" "),_("p",[v._v("握手阶段双方都没有烦琐的工作，因此一方向另一方发起同步（SYN）之后，另一方可以将自己的 ACK 和 SYN 打包作为一条消息回复，因此是 3 次握手——需要 3 次数据传输。")]),v._v(" "),_("p",[v._v("到了挥手阶段，双方都可能有未完成的工作。收到挥手请求的一方，必须马上响应（ACK），表示接收到了挥手请求。"),_("strong",[v._v("类比现实世界中，你收到一个 Offer，出于礼貌你先回复考虑一下，然后思考一段时间再回复 HR 最后的结果")]),v._v("。最后等所有工作结束，再发送请求中断连接（FIN），因此是 4 次挥手。")]),v._v(" "),_("p",[_("strong",[v._v("最后我再给你出一道需要查资料的思考题：一台内存在 8G 左右的服务器，可以同时维护多少个连接")]),v._v("？\n核心的问题是，通信需要缓冲区，通信需要 I/O。这是因为通信占用资源，连接本身占用资源少。")]),v._v(" "),_("h2",{attrs:{id:"tcp-为什么要粘包和拆包"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcp-为什么要粘包和拆包"}},[v._v("#")]),v._v(" TCP 为什么要粘包和拆包？")]),v._v(" "),_("h3",{attrs:{id:"tcp-的拆包和粘包"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcp-的拆包和粘包"}},[v._v("#")]),v._v(" TCP 的拆包和粘包")]),v._v(" "),_("p",[_("strong",[v._v("TCP 是一个传输层协议")]),v._v("。\nTCP 发送数据的时候，往往不会将数据一次性发送，像下图这样：")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://linkeq.oss-cn-chengdu.aliyuncs.com/img/2022/07/23/Cgp9HWB-mySAMiRJAACvL4JE7Ow394-23d51c.png",alt:"Drawing 1.png"}})]),v._v(" "),_("p",[v._v("而是将数据拆分成很多个部分，然后再逐个发送。像下图这样：")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://linkeq.oss-cn-chengdu.aliyuncs.com/img/2022/07/23/CioPOWB-myyARws0AADwpYVdoRk460-0482d7.png",alt:"Drawing 3.png"}}),v._v("\n缓冲区是在内存中开辟的一块区域，目的是缓冲。\n方方面面的原因："),_("strong",[v._v("在传输层封包不能太大")]),v._v("。")]),v._v(" "),_("p",[v._v("TCP 协议，会将数据拆分成不超过缓冲区大小的一个个部分。每个部分有一个独特的名词，叫作 "),_("strong",[v._v("TCP 段（TCP Segment）")]),v._v("。")]),v._v(" "),_("p",[v._v("数据经过拆分，然后传输，然后在目的地重组，俗称"),_("strong",[v._v("拆包")]),v._v("。")]),v._v(" "),_("p",[v._v("防止多次发送占用资源，TCP 协议有可能将它们合并成一个 TCP 段发送，在目的地再还原成多个数据，这个过程俗称"),_("strong",[v._v("粘包")]),v._v("。所以粘包是将多个数据合并成一个 TCP 段发送。")]),v._v(" "),_("h3",{attrs:{id:"tcp-segment"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcp-segment"}},[v._v("#")]),v._v(" TCP Segment")]),v._v(" "),_("p",[v._v("那么一个 TCP 段长什么样子呢？下图是一个 TCP 段的格式：")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://linkeq.oss-cn-chengdu.aliyuncs.com/img/2022/07/23/Cgp9HWB-m0mARV-VAAZgGUE4aeU706-228d52.png",alt:"Drawing 7.png"}})]),v._v(" "),_("p",[v._v("我们可以看到，TCP 的很多配置选项和数据粘在了一起，作为一个 TCP 段。")]),v._v(" "),_("p",[v._v("显然，让你把每一部分都记住似乎不太现实，但是我会带你把其中最主要的部分理解。"),_("strong",[v._v("TCP 协议就是依靠每一个 TCP 段工作的，所以你每认识一个 TCP 的能力，几乎都会找到在 TCP Segment 中与之对应的字段")]),v._v("。接下来我先带你认识下它们。")]),v._v(" "),_("ol",[_("li",[v._v("Source Port/Destination Port 描述的是发送端口号和目标端口号，代表发送数据的应用程序和接收数据的应用程序。比如 80 往往代表 HTTP 服务，22 往往是 SSH 服务……")]),v._v(" "),_("li",[v._v("Sequence Number 和 Achnowledgment Number 是保证可靠性的两个关键。具体见下文的讨论。")]),v._v(" "),_("li",[v._v("Data Offset 是一个偏移量。这个量存在的原因是 TCP Header 部分的长度是可变的，因此需要一个数值来描述数据从哪个字节开始。")]),v._v(" "),_("li",[v._v("Reserved 是很多协议设计会保留的一个区域，用于日后扩展能力。")]),v._v(" "),_("li",[v._v("URG/ACK/PSH/RST/SYN/FIN 是几个标志位，用于描述 TCP 段的行为。也就是一个 TCP 封包到底是做什么用的？")])]),v._v(" "),_("p",[v._v("1）URG 代表这是一个紧急数据，比如远程操作的时候，用户按下了 Ctrl+C，要求终止程序，这种请求需要紧急处理。")]),v._v(" "),_("p",[v._v("2）ACK 代表响应，我们在“"),_("a",{attrs:{href:"https://gitee.com/link?target=https%3A%2F%2Fkaiwu.lagou.com%2Fcourse%2FcourseInfo.htm%3FcourseId%3D837%23%2Fdetail%2Fpc%3Fid%3D7266%26fileGuid%3DxxQTRXtVcqtHK6j8",target:"_blank",rel:"noopener noreferrer"}},[v._v("02 | 传输层协议 TCP：TCP 为什么握手是 3 次、挥手是 4 次？"),_("OutboundLink")],1),v._v("”讲到过，所有的消息都必须有 ACK，这是 TCP 协议确保稳定性的一环。")]),v._v(" "),_("p",[v._v("3）PSH 代表数据推送，也就是在传输数据的意思。")]),v._v(" "),_("p",[v._v("4）SYN 同步请求，也就是申请握手。")]),v._v(" "),_("p",[v._v("5）FIN 终止请求，也就是挥手。")]),v._v(" "),_("p",[_("strong",[v._v("特别说明一下：以上这 5 个标志位，每个占了一个比特，可以混合使用。比如 ACK 和 SYN 同时为 1，代表同步请求和响应被合并了。这也是 TCP 协议，为什么是三次握手的原因之一")]),v._v("。")]),v._v(" "),_("p",[v._v("6） Window 也是 TCP 保证稳定性并进行流量控制的工具，我们会在“"),_("a",{attrs:{href:"https://gitee.com/link?target=https%3A%2F%2Fkaiwu.lagou.com%2Fcourse%2FcourseInfo.htm%3FcourseId%3D837%23%2Fdetail%2Fpc%3Fid%3D7268",target:"_blank",rel:"noopener noreferrer"}},[v._v("04 | TCP 的稳定性：滑动窗口和流速控制是怎么回事？"),_("OutboundLink")],1),v._v("”中详细介绍。")]),v._v(" "),_("p",[v._v("7）Checksum 是校验和，用于校验 TCP 段有没有损坏。")]),v._v(" "),_("p",[v._v("8）Urgent Pointer 指向最后一个紧急数据的序号（Sequence Number）。它存在的原因是：有时候紧急数据是连续的很多个段，所以需要提前告诉接收方进行准备。")]),v._v(" "),_("p",[v._v("9）Options 中存储了一些可选字段，比如接下来我们要讨论的 MSS（Maximun Segment Size）。\n10）Padding 存在的意义是因为 Options 的长度不固定，需要 Pading 进行对齐。")]),v._v(" "),_("h3",{attrs:{id:"equence-number-和-acknowledgement-number"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#equence-number-和-acknowledgement-number"}},[v._v("#")]),v._v(" equence Number 和 Acknowledgement Number")]),v._v(" "),_("p",[v._v("在 TCP 协议的设计当中，数据被拆分成很多个部分，部分增加了协议头。合并成为一个 TCP 段，进行传输。这个过程，我们俗称"),_("strong",[v._v("拆包")]),v._v("。")]),v._v(" "),_("p",[v._v("顺序：\n要两个值去描述——"),_("strong",[v._v("也就是发送的字节数和接收的字节数")]),v._v("。\n"),_("img",{attrs:{src:"https://linkeq.oss-cn-chengdu.aliyuncs.com/img/2022/07/23/Cgp9HWB-m82AUJiLAAHfbaP08JE788-5dda2b.png",alt:"Drawing 13.png"}})]),v._v(" "),_("p",[_("strong",[v._v("注意，无论 S*"),_("em",[v._v("**eq**")]),v._v("* 还是 ACK，都是针对“对方”而言的。是对方发送的数据和对方接收到的数据")]),v._v("。")]),v._v(" "),_("h3",{attrs:{id:"mss-maximun-segment-size"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mss-maximun-segment-size"}},[v._v("#")]),v._v(" MSS（Maximun Segment Size）")]),v._v(" "),_("p",[v._v("TCP Header 中的可选项（Options），这个可选项控制了 TCP 段的大小，它是一个协商字段（Negotiate）。")]),v._v(" "),_("p",[v._v("TCP 段的大小（MSS）涉及发送、接收缓冲区的大小设置，双方实际发送接收封包的大小，对拆包和粘包的过程有指导作用，因此需要双方去协商。")]),v._v(" "),_("p",[_("strong",[v._v("因为大的 TCP 段，会降低性能，比如内存使用的性能")]),v._v("。还有就是"),_("strong",[v._v("资源的占用")]),v._v("。\n"),_("strong",[v._v("其次，支持 TCP 协议工作的 IP 协议，工作效率会下降")]),v._v("。\n"),_("strong",[v._v("所以在使用的过程当中，MSS 的配置，往往都是一个折中的方案")]),v._v("。而根据 Unix 的哲学，不要去猜想什么样的方案是最合理的，而是要尝试去用实验证明它，一切都要用实验依据说话。")]),v._v(" "),_("p",[_("strong",[v._v("TCP 协议是如何恢复数据的顺序的，TCP 拆包和粘包的作用是什么")]),v._v("？")]),v._v(" "),_("p",[v._v("【"),_("strong",[v._v("解析")]),v._v("】TCP  拆包的作用是将任务拆分处理，降低整体任务出错的概率，以及减小底层网络处理的压力。拆包过程需要保证数据经过网络的传输，又能恢复到原始的顺序。这中间，需要数学提供保证顺序的理论依据。TCP 利用（发送字节数、接收字节数）的唯一性来确定封包之间的顺序关系，粘包是为了防止数据量过小，导致大量的传输，而将多个 TCP 段合并成一个发送。")]),v._v(" "),_("h2",{attrs:{id:"滑动窗口和流速控制是怎么回事"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#滑动窗口和流速控制是怎么回事"}},[v._v("#")]),v._v(" 滑动窗口和流速控制是怎么回事？")]),v._v(" "),_("p",[_("strong",[v._v("TCP 作为一个传输层协议，最核心的能力是传输。传输需要保证可靠性，还需要控制流速，这两个核心能力均由滑动窗口提供")]),v._v("。")]),v._v(" "),_("h3",{attrs:{id:"请求-响应模型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#请求-响应模型"}},[v._v("#")]),v._v(" 请求/响应模型")]),v._v(" "),_("p",[v._v("TCP 中每个发送的请求都需要响应。")]),v._v(" "),_("h4",{attrs:{id:"排队-queuing"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#排队-queuing"}},[v._v("#")]),v._v(" 排队（Queuing）")]),v._v(" "),_("p",[v._v("在这种情况下，通常我们会考虑"),_("strong",[v._v("排队（Queuing）机制")]),v._v("。\n"),_("img",{attrs:{src:"https://linkeq.oss-cn-chengdu.aliyuncs.com/img/2022/07/23/CioPOWCCKwuAfBn5AABKdgtX54w997-32ada3.png",alt:"image (3).png"}})]),v._v(" "),_("p",[v._v("而发送中的封包，何时收到 ACK 是一件不确定的事情，这样使用队列似乎也有一定的问题。")]),v._v(" "),_("h3",{attrs:{id:"滑动窗口-sliding-window"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#滑动窗口-sliding-window"}},[v._v("#")]),v._v(" 滑动窗口（Sliding Window）")]),v._v(" "),_("p",[v._v("在上面的模型当中，我们之所以觉得算法不好设计，是因为用错了数据结构。有个说法叫作如果程序写复杂了，那就是写错了。这里其实应该用一种叫作"),_("strong",[v._v("滑动窗口的数据结构")]),v._v("去实现。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://linkeq.oss-cn-chengdu.aliyuncs.com/img/2022/07/23/Cgp9HWCCKxSAROSpAAA_zThgiBA669-801ec7.png",alt:"image (4).png"}})]),v._v(" "),_("p",[v._v("如上图所示：")]),v._v(" "),_("ul",[_("li",[v._v("深绿色代表已经收到 ACK 的段")]),v._v(" "),_("li",[v._v("浅绿色代表发送了，但是没有收到 ACK 的段")]),v._v(" "),_("li",[v._v("白色代表没有发送的段")]),v._v(" "),_("li",[v._v("紫色代表暂时不能发送的段")])]),v._v(" "),_("p",[v._v("下面我们重新设计一下不同类型封包的顺序，将已发送的数据放到最左边，发送中的数据放到中间，未发送的数据放到右边。假设我们最多同时发送 5  个封包，也就是窗口大小 = 5。窗口中的数据被同时发送出去，然后等待 ACK。如果一个封包 ACK 到达，我们就将它标记为已接收（深绿色）。")]),v._v(" "),_("p",[v._v("如下图所示，有两个封包的 ACK 到达，因此标记为绿色。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://linkeq.oss-cn-chengdu.aliyuncs.com/img/2022/07/23/Cgp9HWCCKxuAeVUyAAA_sW29BSM139-de830e.png",alt:"image (5).png"}})]),v._v(" "),_("p",[v._v("这个时候滑动窗口可以向右滑动，如下图所示：")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://linkeq.oss-cn-chengdu.aliyuncs.com/img/2022/07/23/CioPOWCCKyCAMaA7AAA_zxqi_ig808-924c82.png",alt:"image (6).png"}})]),v._v(" "),_("h4",{attrs:{id:"重传"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#重传"}},[v._v("#")]),v._v(" 重传")]),v._v(" "),_("p",[v._v("如果发送过程中，部分数据没能收到 ACK 会怎样呢？这就可能发生重传。")]),v._v(" "),_("p",[v._v("如果发生下图这样的情况，段 4 迟迟没有收到 ACK。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://linkeq.oss-cn-chengdu.aliyuncs.com/img/2022/07/23/Cgp9HWCCKyaAcZwMAABGuK2lrZY271-bda810.png",alt:"image (7).png"}})]),v._v(" "),_("p",[v._v("这个时候滑动窗口只能右移一个位置，如下图所示：")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://linkeq.oss-cn-chengdu.aliyuncs.com/img/2022/07/23/CioPOWCCKyuADL6mAABGoEBZ_2Y287-4eedba.png",alt:"image (8).png"}})]),v._v(" "),_("p",[v._v("在这个过程中，如果后来段 4 重传成功（接收到 ACK），那么窗口就会继续右移。如果段 4 发送失败，还是没能收到 ACK，那么接收方也会抛弃段 5、段 6、段 7。这样从段 4 开始之后的数据都需要重发。")]),v._v(" "),_("h4",{attrs:{id:"快速重传"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#快速重传"}},[v._v("#")]),v._v(" 快速重传")]),v._v(" "),_("p",[v._v("接收方希望催促发送方尽快补发某个 TCP 段\n例如段 1、段 2、段 4 到了，但是段 3 没有到。 接收方可以发送多次段 3 的 ACK。如果发送方收到多个段 3 的 ACK，就会重发段 3。这个机制称为"),_("strong",[v._v("快速重传")]),v._v("。这和超时重发不同，是一种催促的机制。")]),v._v(" "),_("h4",{attrs:{id:"思考-窗口大小的单位是"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#思考-窗口大小的单位是"}},[v._v("#")]),v._v(" 思考：窗口大小的单位是？")]),v._v(" "),_("p",[v._v("请你思考另一个问题，窗口大小的单位是多少呢？"),_("strong",[v._v("实际操作中，每个 TCP 段的大小不同，限制数量会让接收方的缓冲区不好操作，因此实际操作中窗口大小单位是字节数")]),v._v("。")]),v._v(" "),_("h3",{attrs:{id:"流速控制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#流速控制"}},[v._v("#")]),v._v(" 流速控制")]),v._v(" "),_("p",[_("strong",[v._v("发送、接收窗口的大小可以用来控制 TCP 协议的流速")]),v._v("。")]),v._v(" "),_("p",[_("strong",[v._v("滑动窗口和流速控制是怎么回事")]),v._v("？")]),v._v(" "),_("p",[v._v("【"),_("strong",[v._v("解析")]),v._v("】"),_("strong",[v._v("滑动窗口是 TCP 协议控制可靠性的核心")]),v._v("。发送方将数据拆包，变成多个分组。然后将数据放入一个拥有滑动窗口的数组，依次发出，仍然遵循先入先出（FIFO）的顺序，但是窗口中的分组会一次性发送。窗口中序号最小的分组如果收到 ACK，窗口就会发生滑动；如果最小序号的分组长时间没有收到 ACK，就会触发整个窗口的数据重新发送。")]),v._v(" "),_("p",[v._v("另一方面，在多次传输中，网络的平均延迟往往是相对固定的，这样 TCP 协议可以通过双方协商窗口大小控制流速。补充下，上面我们说的分组和 TCP 段是一个意思。")]),v._v(" "),_("h2",{attrs:{id:"tcp-协议和-udp-协议的优势和劣势"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcp-协议和-udp-协议的优势和劣势"}},[v._v("#")]),v._v(" TCP 协议和 UDP 协议的优势和劣势？")]),v._v(" "),_("p",[_("strong",[v._v("TCP 最核心的价值是提供了可靠性，而 UDP 最核心的价值是灵活，你几乎可以用它来做任何事情")]),v._v("。")]),v._v(" "),_("h3",{attrs:{id:"udp-协议"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#udp-协议"}},[v._v("#")]),v._v(" UDP 协议")]),v._v(" "),_("p",[_("strong",[v._v("UDP（User Datagram Protocol），目标是在传输层提供直接发送报文（Datagram）的能力")]),v._v("。Datagram 是数据传输的最小单位。UDP 协议不会帮助拆分数据，它的目标只有一个，就是发送报文。")]),v._v(" "),_("h3",{attrs:{id:"udp-的封包格式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#udp-的封包格式"}},[v._v("#")]),v._v(" UDP 的封包格式")]),v._v(" "),_("p",[v._v("UDP 的设计目标就是在允许用户直接发送报文的情况下，最大限度地简化应用的设计。下图是 UDP 的报文格式。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://linkeq.oss-cn-chengdu.aliyuncs.com/img/2022/07/23/Cgp9HWCCfQeAGOF3AACK2Gf5t6I606-5ca8d5.png",alt:"图片1.png"}}),v._v("\nUDP 的报文非常简化，只有 5 个部分")]),v._v(" "),_("ul",[_("li",[v._v("Source Port 是源端口号。因为 UDP 协议的特性（不需要 ACK），因此这个字段是可以省略的。但有时候对于防火墙、代理来说，Source Port 有很重要的意义，它们需要用这个字段行过滤和路由。")]),v._v(" "),_("li",[v._v("Destination Port 是目标端口号（这个字段不可以省略）。")]),v._v(" "),_("li",[v._v("Length 是消息体长度。")]),v._v(" "),_("li",[v._v("Checksum 是校验和，作用是检查封包是否出错。")]),v._v(" "),_("li",[v._v("Data octets 就是一个字节一个字节的数据，Octet 是 8 位。\n最简单的校验和就是：")])]),v._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v("checksum=(a+b+c+d) ^ 0xff\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br")]),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br")])]),_("p",[_("strong",[v._v("如果发送方用上述方式计算出 Checksum，并将 a,b,c,d 和 Checksum 一起发送给接收方，接收方就可以用同样的算法再计算一遍，这样就可以确定数据有没有发生损坏")]),v._v("（"),_("strong",[v._v("变化")]),v._v("）。\n数据发生较大的变动，校验和也可能发生碰撞。")]),v._v(" "),_("h3",{attrs:{id:"udp-与-tcp的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#udp-与-tcp的区别"}},[v._v("#")]),v._v(" UDP 与 TCP的区别")]),v._v(" "),_("p",[v._v("接下来我们说说 UDP 和 TCP 的区别。")]),v._v(" "),_("h4",{attrs:{id:"_1-目的差异"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-目的差异"}},[v._v("#")]),v._v(" 1. 目的差异")]),v._v(" "),_("p",[v._v("首先，这两个协议的目的不同：TCP 协议的核心目标是提供可靠的网络传输，而 UDP 的目标是在提供报文交换能力基础上尽可能地简化协议轻装上阵。")]),v._v(" "),_("h4",{attrs:{id:"_2-可靠性差异"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-可靠性差异"}},[v._v("#")]),v._v(" 2. 可靠性差异")]),v._v(" "),_("p",[v._v("TCP 核心是要在保证可靠性提供更好的服务。TCP 会有握手的过程，需要建立连接，保证双方同时在线。而且TCP 有时间窗口持续收集无序的数据，直到这一批数据都可以合理地排序组成连续的结果。")]),v._v(" "),_("p",[v._v("UDP 并不具备以上这些特性，它只管发送数据封包，而且 UDP 不需要 ACK，这意味着消息发送出去成功与否 UDP 是不管的。")]),v._v(" "),_("h4",{attrs:{id:"_3-连接-vs-无连接"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-连接-vs-无连接"}},[v._v("#")]),v._v(" 3. 连接 vs 无连接")]),v._v(" "),_("p",[v._v("TCP 是一个面向连接的协议（Connection-oriented Protocol），传输数据必须先建立连接。 UDP 是一个无连接协议（Connection-less Protocol），数据随时都可以发送，只提供发送封包（Datagram）的能力。")]),v._v(" "),_("h4",{attrs:{id:"_4-流控技术-flow-control"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-流控技术-flow-control"}},[v._v("#")]),v._v(" 4. 流控技术（Flow Control）")]),v._v(" "),_("p",[v._v("TCP 使用了流控技术来确保发送方不会因为一次发送过多的数据包而使接收方不堪重负。TCP  在发送缓冲区中存储数据，并在接收缓冲区中接收数据。当应用程序准备就绪时，它将从接收缓冲区读取数据。如果接收缓冲区已满，接收方将无法处理更多数据，并将其丢弃。UDP 没有提供类似的能力。")]),v._v(" "),_("h4",{attrs:{id:"_5-传输速度"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-传输速度"}},[v._v("#")]),v._v(" 5. 传输速度")]),v._v(" "),_("p",[v._v("UDP 协议简化，封包小，没有连接、可靠性检查等，因此单纯从传输速度上讲，UDP 更快。")]),v._v(" "),_("h4",{attrs:{id:"_6-场景差异"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_6-场景差异"}},[v._v("#")]),v._v(" 6. 场景差异")]),v._v(" "),_("p",[v._v("TCP 每个数据封包都需要确认，因此天然不适应高速数据传输场景，比如观看视频（流媒体应用）、网络游戏（TCP  有延迟）等。具体来说，如果网络游戏用 TCP，每个封包都需要确认，可能会造成一定的延迟；再比如音、视频传输天生就允许一定的丢包率；Ping 和  DNSLookup，这类型的操作只需要一次简单的请求/返回，不需要建立连接，用 UDP 就足够了。")]),v._v(" "),_("p",[_("strong",[v._v("所以理论上，任何一个用 TCP 协议构造的成熟应用层协议，都可以用 UDP 重构")]),v._v("。")]),v._v(" "),_("p",[v._v("本来用一个工具可以解决所有问题，但是如果某一类问题体量非常大，就会专门为这类问题创造工具。")]),v._v(" "),_("p",[_("strong",[v._v("第一类：TCP 场景")])]),v._v(" "),_("ul",[_("li",[v._v("远程控制（SSH）")]),v._v(" "),_("li",[v._v("File Transfer Protocol（FTP）")]),v._v(" "),_("li",[v._v("邮件（SMTP、IMAP）等")]),v._v(" "),_("li",[v._v("点对点文件传出（微信等）")])]),v._v(" "),_("p",[_("strong",[v._v("第二类：UDP 场景")])]),v._v(" "),_("ul",[_("li",[v._v("网络游戏")]),v._v(" "),_("li",[v._v("音视频传输")]),v._v(" "),_("li",[v._v("DNS")]),v._v(" "),_("li",[v._v("Ping")]),v._v(" "),_("li",[v._v("直播")])]),v._v(" "),_("p",[_("strong",[v._v("第三类：模糊地带")])]),v._v(" "),_("ul",[_("li",[v._v("HTTP（目前以 TCP 为主）")]),v._v(" "),_("li",[v._v("文件传输")])]),v._v(" "),_("p",[v._v("UDP 不提供可靠性，不代表我们不能解决可靠性。UDP  的核心价值是灵活、轻量，构造了最小版本的传输层协议。在这个之上，还可以实现连接（Connection），实现会话（Session），实现可靠性（Reliability）……")]),v._v(" "),_("p",[v._v("TCP 协议和 UDP 协议的优势和劣势？")]),v._v(" "),_("p",[v._v("【"),_("strong",[v._v("解析")]),v._v("】"),_("strong",[v._v("TCP 最核心的价值就是提供封装好的一套解决可靠性的优秀方案")]),v._v("。 在前面 3 讲中，你可以看到解决可靠性是非常复杂的，要考虑非常多的因素。TCP 帮助我们在确保吞吐量、延迟、丢包率的基础上，保证可靠性。")]),v._v(" "),_("p",[v._v("历史上 TCP 也是靠可靠性起家的，有一次著名的实验，TCP 协议的设计者做了一次演示——利用 TCP  协议将数据在卫星和地面之间传播了很多次，没有发生任何数据损坏。从那个时候开始，研发人员开始大量选择 TCP  协议。然后随着生态的发展，逐渐提供了流控等能力。"),_("strong",[v._v("TCP 的成功在于它给人们提供了很多现成、好用的能力")]),v._v("。")]),v._v(" "),_("p",[_("strong",[v._v("UDP 则不同，UDP 提供了最小版的实现，只支持 Checksum")]),v._v("。"),_("strong",[v._v("UDP 最核心的价值是灵活、轻量、传输速度快")]),v._v("。考虑到不同应用的特性，如果不使用一个大而全的方案，为自己的应用特性量身定做，可能会做得更好。比如网络游戏中游戏客户端不断向服务端发送玩家的位置，如果某一次消息丢失了，只要这个消息不影响最终的游戏结果，就可以只看下一个消息。不同应用有不同的特性，需要的可靠性级别不一样，这就是越来越多的应用开始使用 UDP 的原因之一。")]),v._v(" "),_("p",[v._v("其实对于我们来说，TCP 协议和 UDP 协议根本不存在什么优势和劣势，只不过是场景不同，选择不同而已。"),_("strong",[v._v("最后还有一个非常重要的考虑因素就是成本，如果没有足够专业的团队解决网络问题，TCP 无疑会是更好的选择")]),v._v("。")]),v._v(" "),_("h2",{attrs:{id:"ipv4-协议-路由和寻址的区别是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ipv4-协议-路由和寻址的区别是什么"}},[v._v("#")]),v._v(" IPv4 协议：路由和寻址的区别是什么？")]),v._v(" "),_("h3",{attrs:{id:"什么是-ip-协议"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是-ip-协议"}},[v._v("#")]),v._v(" 什么是 IP 协议？")]),v._v(" "),_("p",[_("strong",[v._v("IP 协议")]),v._v("（"),_("strong",[v._v("Internet Protocol")]),v._v("）是一个处于垄断地位的网络层协议。 IPv4 就是 IP 协议的第 4 个版本，是目前互联网的主要网络层协议。IPv4 为传输层提供 Host-To-Host 的能力，IPv4 需要底层数据链路层的支持。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://linkeq.oss-cn-chengdu.aliyuncs.com/img/2022/07/23/CioPOWCKhIKAEjAaAAA-0cJYHuU062-84cd91.png",alt:"image.png"}})]),v._v(" "),_("p",[_("strong",[v._v("可靠性保证数据无损地到达目的地")]),v._v("。\n可靠性是 IP 协议上方的 Host-To-Host 协议保证的，比如 TCP 协议通过应答机制、窗口等保证数据的可靠性。 IP 协议自身不能保证可靠性。比如 IP 协议可能会遇到下面这几个问题：")]),v._v(" "),_("ul",[_("li",[v._v("封包损坏（数据传输过程中被损坏）；")]),v._v(" "),_("li",[v._v("丢包（数据发送过程中丢失）；")]),v._v(" "),_("li",[v._v("重发（数据被重发，比如中间设备通过 2 个路径传递数据）；")]),v._v(" "),_("li",[v._v("乱序（到达目的地时数据和发送数据不一致）。")])]),v._v(" "),_("p",[v._v("但是 IP 协议并不会去处理这些问题，因为网络层只专注解决网络层的问题， 而且不同特性的应用在不同场景下需要解决的问题不一样。对于网络层来说，这里主要有 3 个问题要解决：")]),v._v(" "),_("ul",[_("li",[v._v("延迟")]),v._v(" "),_("li",[v._v("吞吐量")]),v._v(" "),_("li",[v._v("丢包率")])]),v._v(" "),_("p",[v._v("IP 协议目前主要有两种架构，一种是 IPv4，是目前应用最广泛的互联网协议；另一种是 IPv6，目前世界各地正在积极地部署 IPv6。")]),v._v(" "),_("h3",{attrs:{id:"ip-协议的工作原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ip-协议的工作原理"}},[v._v("#")]),v._v(" IP 协议的工作原理")]),v._v(" "),_("p",[_("strong",[v._v("IP 协议接收 IP 协议上方的 Host-To-Host 协议传来的数据，然后进行拆分，这个能力叫作分片（Fragmentation）")]),v._v("。然后 IP 协议为每个片段（Fragment）增加一个 IP 头（Header），组成一个"),_("strong",[v._v("IP 封包")]),v._v("（Datagram）。之后，IP 协议调用底层的局域网（数据链路层）传送数据。最后 IP 协议通过寻址和路由能力最终把封包送达目的地。")]),v._v(" "),_("h4",{attrs:{id:"分片-fragmentation"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分片-fragmentation"}},[v._v("#")]),v._v(" 分片（Fragmentation）")]),v._v(" "),_("p",[_("strong",[v._v("分片就是把数据切分成片")]),v._v("。在网络环境中往往存在多条路径，一条路径断了，说不定其他路径可以连通。")]),v._v(" "),_("h4",{attrs:{id:"增加协议头-ip-header"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#增加协议头-ip-header"}},[v._v("#")]),v._v(" 增加协议头（IP Header）")]),v._v(" "),_("p",[v._v("切片完成之后，IP 协议会为每个切片（数据封包 Datagram）增加一个协议头。一个 IPv4 的协议头看上去就是如下图所示的样子：")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://linkeq.oss-cn-chengdu.aliyuncs.com/img/2022/07/23/Cgp9HWCKhJaAKKEhAABhmC7udP0409-a2d064.png",alt:"image (1).png"}})]),v._v(" "),_("p",[v._v("其中分成 4 个部分。")]),v._v(" "),_("ul",[_("li",[v._v("最重要的是原地址和目标地址。IPv4 的地址是 4 组 8 位的数字，总共是 32 位。具体地址的作用我们在下面的“寻址部分”介绍。")]),v._v(" "),_("li",[v._v("Type Of Service 服务的类型，是为了响应不同的用户诉求，用来选择延迟、吞吐量和丢包率之间的关系。关于这块知识，本讲后半部分就会分析。")]),v._v(" "),_("li",[v._v("IHL（Internet Header Length）用来描述 IP 协议头的大小。所以 IP 协议头的大小是可变的。IHL 只有 4 位，最大值 1111 = 15。最大是 15 个双字（15*4 字节 = 60 字节）。")]),v._v(" "),_("li",[v._v("Total Length 定义报文（封包 Datagram）的长度。")]),v._v(" "),_("li",[v._v("Identification（报文的 ID），发送方分配，代表顺序。")]),v._v(" "),_("li",[v._v("Fragment offset 描述要不要分包（拆分），以及如何拆分。")]),v._v(" "),_("li",[v._v("Time To Live 描述封包存活的时间。因此每个 IP 封包发送出去后，就开始销毁倒计时。如果倒计时为 0，就会销毁。比如中间的路由器看到一个 TTL 为 0 的封包，就直接丢弃。")]),v._v(" "),_("li",[v._v("Protocol 是描述上层的协议，比如 TCP = 6，UDP = 17。")]),v._v(" "),_("li",[v._v("Options 代表可选项。")]),v._v(" "),_("li",[v._v("Checksum 用来检验封包的正确性，如果 Checksum 对不上，就需要选择丢弃这个封包。\n"),_("strong",[v._v("延迟（latency）")])])]),v._v(" "),_("p",[v._v("延迟指的是 1 bit 的数据从网络的一个终端传送到另一个终端需要的时间。这个时间包括在发送端准备发送的时间、排队发送的时间、发送数据的时间、数据传输的时间等。")]),v._v(" "),_("p",[_("strong",[v._v("吞吐量（Throughput）")])]),v._v(" "),_("p",[v._v("吞吐量指单位时间内可以传输的平均数据量。比如用 bit/s 作为单位，就是 bps。吞吐量和延迟没有联系，比如延迟很高的网络，有可能吞吐量很高。可以类比成水管很大流速很慢，对比水管很细流速很快，这两种情况，最终流量可以是相等的。")]),v._v(" "),_("p",[_("strong",[v._v("丢包率（Packet loss）")])]),v._v(" "),_("p",[v._v("丢表率指发送出去的封包没有到达目的地的比例。 在最大流速确定的网络中，丢表率会直接影响吞吐量。\nIP 协议头中的 Type of Service 字段里，有以下 4 种主要的类型可以选择：")]),v._v(" "),_("ul",[_("li",[v._v("低延迟")]),v._v(" "),_("li",[v._v("高吞吐量")]),v._v(" "),_("li",[v._v("低丢包率")]),v._v(" "),_("li",[v._v("低成本")])]),v._v(" "),_("h4",{attrs:{id:"寻址-addressing"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#寻址-addressing"}},[v._v("#")]),v._v(" 寻址（Addressing）")]),v._v(" "),_("p",[v._v("地址想要表达的是一个东西在哪里。寻址要做的就是：给一个地址，然后找到这个东西。IPv4 协议的寻址过程是逐级寻址。")]),v._v(" "),_("p",[_("strong",[v._v("IPv4 地址")])]),v._v(" "),_("p",[v._v("IPv4 地址是 4 个 8 位（Octet）排列而成，总共可以编址 43 亿个地址。")]),v._v(" "),_("p",[_("code",[v._v("103.16.3.1")]),v._v("的二进制，如下图所示：")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://linkeq.oss-cn-chengdu.aliyuncs.com/img/2022/07/23/CioPOWCKhKKAXD3PAAAvHpywmcc109-9b869b.png",alt:"image (2).png"}})]),v._v(" "),_("p",[_("strong",[v._v("寻址过程")])]),v._v(" "),_("p",[v._v("寻址就是如何根据 IP 地址找到设备。因为 IPv4 的世界中，网络是一个树状模型。顶层有多个平行的网络，每个网络有自己的网络号。然后顶层网络下方又有多个子网，子网下方还有子网，最后才是设备。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://linkeq.oss-cn-chengdu.aliyuncs.com/img/2022/07/23/CioPOWCKhKqAPvolAABl3y5ucLM593-adb3c8.png",alt:"image (3).png"}})]),v._v(" "),_("p",[v._v("IP 协议的寻址过程需要逐级找到网络，最后定位设备。\n"),_("strong",[v._v("步骤 1：找到顶层网络")])]),v._v(" "),_("p",[v._v("比如"),_("code",[v._v("103.16.3.1")]),v._v("最顶层的网络号可以和"),_("code",[v._v("255.0.0.0")]),v._v("（子网掩码）做位与运算得到，如下所示：")]),v._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v("103.16.3.1 & 255.0.0.0 = 103.0.0.0\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br")]),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br")])]),_("p",[v._v("因此"),_("code",[v._v("103.0.0.0")]),v._v("就是"),_("code",[v._v("103.16.3.1")]),v._v("所在的顶层网络。"),_("code",[v._v("255.0.0.0.")]),v._v("称作子网掩码。子网掩码的作用就是帮助根据 IP 地址找到对应子网。子网掩码是很多个"),_("code",[v._v("1")]),v._v("接着很多个"),_("code",[v._v("0")]),v._v("，和 IP 地址一起使用。")]),v._v(" "),_("p",[_("strong",[v._v("步骤 2：找到下一层网络")])]),v._v(" "),_("p",[v._v("接下来要找到下一级网络，就需要用 IP 地址和下一级的子网掩码做位与运算。 比如：")]),v._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v("103.16.3.1 & 255.255.0.0 = 103.16.0.0\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br")]),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br")])]),_("p",[v._v("其中"),_("code",[v._v("103.16.0.0")]),v._v("就是下一级的网络号。")]),v._v(" "),_("p",[_("strong",[v._v("步骤 3：找到再下一级网络")])]),v._v(" "),_("p",[v._v("接下来使用"),_("code",[v._v("255.255.255.0")]),v._v("子网掩码找到下一级网络是"),_("code",[v._v("103.16.3.0")]),v._v("。")]),v._v(" "),_("p",[_("strong",[v._v("步骤 4：定位设备")])]),v._v(" "),_("p",[v._v("设备就在子网"),_("code",[v._v("103.16.3.0")]),v._v("中，最终找到的设备号是"),_("code",[v._v("1")]),v._v("。")]),v._v(" "),_("p",[v._v("当然子网掩码也不一定都是"),_("code",[v._v("255")]),v._v("，比如这个子网掩码"),_("code",[v._v("255.240.0.0")]),v._v("也是可以的。但通常我们把 IPv4 的网络分成这样 4 层。")]),v._v(" "),_("h4",{attrs:{id:"路由-routing"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#路由-routing"}},[v._v("#")]),v._v(" 路由（Routing）")]),v._v(" "),_("p",[v._v("在寻址过程中，数据总是存于某个局域网中。如果目的地在局域网中，就可以直接定位到设备了。如果目的地不在局域网中，这个时候，就需再去往其他网络。\n"),_("img",{attrs:{src:"https://linkeq.oss-cn-chengdu.aliyuncs.com/img/2022/07/23/CioPOWCKhLKAJ_MVAAB0Y3Ri3XU165-f76d5f.png",alt:"image (4).png"}}),v._v("\n当前网络中用"),_("code",[v._v("route")]),v._v("查看路由表，可能可以看到一条下面这样的记录。")]),v._v(" "),_("ul",[_("li",[v._v("Destination：14.0.0.0")]),v._v(" "),_("li",[v._v("Gateway：16.12.1.100")]),v._v(" "),_("li",[v._v("Mask：255.0.0.0")]),v._v(" "),_("li",[v._v("Iface：16.12.1.1")])]),v._v(" "),_("p",[v._v("这条记录就说明如果你要去往 14.0.0.0 网络，IP 地址 14.215.177.38 先要和 255.0.0.0 进行位运算，然后再查表，看到 14.0.0.0，得知去往 Gateway 的网卡（IFace）是 16.12.1.1。")]),v._v(" "),_("p",[v._v("路由和寻址的区别是什么**？")]),v._v(" "),_("p",[v._v("【"),_("strong",[v._v("解析")]),v._v("】寻址（Addressing）就是通过地址找设备。和现实生活中的寻址是一样的，比如根据地址找到一个公寓。在 IPv4 协议中，寻址找到的是一个设备所在的位置。")]),v._v(" "),_("p",[v._v("路由（Routing）本质是路径的选择。就好像知道地址，但是到了每个十字路口，还需要选择具体的路径。")]),v._v(" "),_("p",[v._v("所以，要做路由，就必须能够理解地址，也就是需要借助寻址的能力。要通过寻址找到最终的设备，又要借助路由在每个节点选择数据传输的线路。因此，路由和寻址，是相辅相成的关系。")]),v._v(" "),_("h2",{attrs:{id:"ipv6-协议-tunnel-技术是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ipv6-协议-tunnel-技术是什么"}},[v._v("#")]),v._v(" IPv6 协议：Tunnel 技术是什么？")]),v._v(" "),_("h3",{attrs:{id:"ipv4-和-ipv6-相似点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ipv4-和-ipv6-相似点"}},[v._v("#")]),v._v(" IPv4 和 IPv6 相似点")]),v._v(" "),_("p",[v._v("IPv6 的工作原理和 IPv4 类似，分成切片（Segmentation）、增加封包头、路由（寻址）这样几个阶段去工作。IPv6  同样接收上方主机到主机（Host-to-Host）协议传递来的数据，比如一个 TCP  段（Segment），然后将 TCP  段再次切片做成一个个的 IPv6 封包（Datagram or  Packet），再调用底层局域网能力（数据链路层）传输数据。具体的过程如下图所示：")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://linkeq.oss-cn-chengdu.aliyuncs.com/img/2022/07/23/CioPOWCH4u-AWVEAAAH_xR5D6lU716-2363a9.png",alt:"Drawing 1.png"}})]),v._v(" "),_("p",[_("strong",[v._v("作为网络层协议的 IPv6，最核心的能力是确保数据可以从发送主机到达接收主机")]),v._v("。")]),v._v(" "),_("h3",{attrs:{id:"ipv6-地址"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ipv6-地址"}},[v._v("#")]),v._v(" IPv6 地址")]),v._v(" "),_("p",[v._v("接下来我们重点说说地址格式的区别。")]),v._v(" "),_("p",[v._v("IPv4 的地址是 4 个 8 位（octet），总共 32 位。 IPv6 的地址是 8 个 16 位（hextet），总共 128  位。从这个设计来看，IPv6 可以支持的地址数量是 IPv4 的很多倍。就算将 IPv6  的地址分给每个人，每个人拥有的地址数量，依旧是今天总地址数量的很多倍。")]),v._v(" "),_("p",[v._v("格式上，IPv4 的地址用"),_("code",[v._v(".")]),v._v("分割，如"),_("code",[v._v("103.28.7.35")]),v._v("。每一个是 8 位，用 0-255 的数字表示。")]),v._v(" "),_("p",[v._v("IPv6 的地址用"),_("code",[v._v(":")]),v._v("分割，如"),_("code",[v._v("0123:4567:89ab:cdef:0123:4567:89ab:cdef")]),v._v("，总共 8 个 16 位的数字，通常用 16 进制表示。")]),v._v(" "),_("p",[v._v("#图片需要重绘，并参考下方中英翻译，在图中标出对应中文")]),v._v(" "),_("ul",[_("li",[v._v("Hexadecimal notation：十六进制表示")]),v._v(" "),_("li",[v._v("Quartet：16 位")]),v._v(" "),_("li",[v._v("Most significant：最高有效位")]),v._v(" "),_("li",[v._v("Binary notation：二进制表示")])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://linkeq.oss-cn-chengdu.aliyuncs.com/img/2022/07/23/CioPOWCH4wGAT3bUAALH_YQ0Q-U502-896a39.png",alt:"Drawing 3.png"}})]),v._v(" "),_("p",[v._v("上图中的地址是一个 IPv6 地址的完全态，其实也有简写的方式。比如:")]),v._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v("0123:4567:0000:0000:0123:4567:0000:cdef\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br")]),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br")])]),_("p",[v._v("可以省略前 64 字节的"),_("code",[v._v("0000:0000")]),v._v("简写为：")]),v._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v("0123:4567::0123:4567:0000:cdef\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br")]),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br")])]),_("p",[_("code",[v._v("::")]),v._v("只能出现一次，相当于省略了若干组"),_("code",[v._v("0000")]),v._v("。比如说"),_("code",[v._v("1111::2222")]),v._v("相当于中间省略了 6 组"),_("code",[v._v("0000")]),v._v("。为什么不能出现两个"),_("code",[v._v("::")]),v._v("呢？因为如果有两个"),_("code",[v._v("::")]),v._v("，就会对省略的"),_("code",[v._v("0000")]),v._v("的位置产生歧义。比如说"),_("code",[v._v("1111::2222:3333")]),v._v("，你就不知道究竟"),_("code",[v._v("0000")]),v._v("在"),_("code",[v._v("1111::2222")]),v._v("和"),_("code",[v._v("2222::3333")]),v._v("是怎么分布的。")]),v._v(" "),_("p",[v._v("开头的 0 也可以简写，就变成如下的样子：")]),v._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v("123:4567::123:4567:0:cdef\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br")]),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br")])]),_("p",[v._v("还有一种情况我们想要后面部分都填"),_("code",[v._v("0")]),v._v("，比如说"),_("code",[v._v("3c4d::/16")]),v._v("，这个代表只有前"),_("code",[v._v("16")]),v._v("位有数据，后面是"),_("code",[v._v("0")]),v._v("；"),_("code",[v._v("1234:5878:abcd/64")]),v._v("代表只有左边"),_("code",[v._v("64")]),v._v("位有数据，后面是 0；再比如"),_("code",[v._v("ff00/8")]),v._v("，只有左边 8 位是有数据的。")]),v._v(" "),_("h3",{attrs:{id:"ipv6-的寻址"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ipv6-的寻址"}},[v._v("#")]),v._v(" IPv6 的寻址")]),v._v(" "),_("p",[v._v("接下来我们讨论下寻址，和 IPv4 相同，寻址的目的是找到设备，以及规划到设备途经的路径。")]),v._v(" "),_("p",[v._v("几种类型：")]),v._v(" "),_("ul",[_("li",[v._v("全局单播寻址（和 IPv4 地址作用差不多，在互联网中通过地址查找一个设备，简单来说，单播就是 1  对  1）；")]),v._v(" "),_("li",[v._v("本地单播（类似 IPv4 里的一个内部网络，要求地址必须以"),_("code",[v._v("fe80")]),v._v("开头，类似我们 IPv4 中"),_("code",[v._v("127")]),v._v("开头的地址）；")]),v._v(" "),_("li",[v._v("分组多播（Group Multicast），类似今天我们说的广播，将消息发送给多个接收者；")]),v._v(" "),_("li",[v._v("任意播（Anycast），这个方式比较特殊，接下来我们会详细讲解。")])]),v._v(" "),_("h4",{attrs:{id:"全局单播"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#全局单播"}},[v._v("#")]),v._v(" 全局单播")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://linkeq.oss-cn-chengdu.aliyuncs.com/img/2022/07/23/Cgp9HWCH4w-AEinAAAHIfeF4_II848-394780.png",alt:"Drawing 5.png"}})]),v._v(" "),_("p",[v._v("全局单播，就是将消息从一个设备传到另一个设备，这和 IPv4 发送/接收消息大同小异。而全局单播地址，目标就是定位网络中的设备，这个地址和 IPv4 的地址作用相同，只不过格式略有差异。"),_("strong",[v._v("总的来说，IPv6 地址太多，因此不再需要子网掩码，而是直接将 IPv6 的地址分区即可")]),v._v("。")]),v._v(" "),_("p",[v._v("在实现全局单播时，IPv6 地址通常分成 3 个部分：")]),v._v(" "),_("ul",[_("li",[v._v("站点前缀（Site Prefix）48bit，一般是由 ISP（Internet Service Providor，运营商）或者RIR（Regional Internet Registry， 地区性互联网注册机构），RIR 将 IP 地址分配给运营商；")]),v._v(" "),_("li",[v._v("子网号（Subnet ID），16bit，用于站点内部区分子网；")]),v._v(" "),_("li",[v._v("接口号（Interface ID）， 64bit，用于站点内部区分设备。")])]),v._v(" "),_("p",[v._v("因此 IPv6 也是一个树状结构，站点前缀需要一定资质，子网号和接口号内部定义。IPv6 的寻址过程就是先通过站点前缀找到站点，然后追踪子网，再找到接口（也就是设备的网卡）。")]),v._v(" "),_("p",[v._v("从上面全局单播的分区，我们可以看出，IPv6 分给站点的地址非常多。一个站点，有 16bit 的子网，相当于 65535 个子网；每个子网中，还可以用 64 位整数表示设备。")]),v._v(" "),_("h4",{attrs:{id:"本地单播"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#本地单播"}},[v._v("#")]),v._v(" 本地单播")]),v._v(" "),_("p",[v._v("理论上，虽然 IPv6 可以将所有的设备都连入一个网络。但在实际场景中，很多公司还是需要一个内部网络的。这种情况在 IPv6 的设计中属于局域网络。")]),v._v(" "),_("p",[v._v("在局域网络中，实现设备到设备的通信，就是本地单播。IPv6 的本地单播地址组成如下图所示：")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://linkeq.oss-cn-chengdu.aliyuncs.com/img/2022/07/23/Cgp9HWCH4x6AJJxNAAEMhuOKNmY768-6062eb.png",alt:"Drawing 7.png"}})]),v._v(" "),_("p",[v._v("这种协议比较简单，本地单播地址必须以"),_("code",[v._v("fe80")]),v._v("开头，后面 64 位的 0，然后接上 54 位的设备编号。上图中的 Interface 可以理解成网络接口，其实就是网卡。")]),v._v(" "),_("h4",{attrs:{id:"分组多播"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分组多播"}},[v._v("#")]),v._v(" 分组多播")]),v._v(" "),_("p",[v._v("有时候，我们需要实现广播。所谓广播，就是将消息同时发送给多个接收者。")]),v._v(" "),_("p",[v._v("IPv6 中设计了分组多播，来实现广播的能力。当 IP 地址以 8 个 1 开头，也就是"),_("code",[v._v("ff00")]),v._v("开头，后面会跟上一个分组的编号时，就是在进行分组多播。")]),v._v(" "),_("p",[v._v("这个时候，我们需要一个广播设备，在这个设备中已经定义了这些分组编号，并且拥有分组下所有设备的清单，这个广播设备会帮助我们将消息发送给对应分组下的所有设备。")]),v._v(" "),_("h4",{attrs:{id:"任意播-anycast"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#任意播-anycast"}},[v._v("#")]),v._v(" 任意播（Anycast）")]),v._v(" "),_("p",[v._v("任意播，本质是将消息发送给多个接收方，并选择一条最优的路径。这样说有点抽象，接下来我具体解释一下。")]),v._v(" "),_("p",[v._v("比如说在一个网络中有多个授时服务，这些授时服务都共享了一个任播地址。当一个客户端想要获取时间，就可以将请求发送到这个任播地址。客户端的请求扩散出去后，可能会找到授时服务中的一个或者多个，但是距离最近的往往会先被发现。这个时候，客户端就使用它第一次收到的授时信息修正自己的时间。")]),v._v(" "),_("h3",{attrs:{id:"ipv6-和-ipv4-的兼容"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ipv6-和-ipv4-的兼容"}},[v._v("#")]),v._v(" IPv6 和 IPv4 的兼容")]),v._v(" "),_("p",[v._v("目前 IPv6 还没有完全普及，大部分知名的网站都是同时支持 IPv6 和  IPv4。这个时候我们可以分成 2 种情况讨论：")]),v._v(" "),_("ol",[_("li",[v._v("一个 IPv4 的网络和一个 IPv6 的网络通信；")]),v._v(" "),_("li",[v._v("一个 IPv6 的网络和一个 IPv6 的网络通信，但是中间需要经过一个 IPv4 的网络。")])]),v._v(" "),_("p",[_("strong",[v._v("情况 1：IPv4 网络和 IPv6 网络通信")])]),v._v(" "),_("p",[v._v("例如一个 IPv6 的客户端，想要访问 IPv4 的服务器，步骤如下图所示：")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://linkeq.oss-cn-chengdu.aliyuncs.com/img/2022/07/23/CioPOWCH4y-AUMRWAAMbF03aDqY454-173eda.png",alt:"Drawing 9.png"}})]),v._v(" "),_("ol",[_("li",[v._v("客户端通过 DNS64 服务器查询 AAAA 记录。DNS64 是国际互联网工程任务组（IETF）提供的一种解决 IPv4 和 IPv6 兼容问题的 DNS 服务。这个 DNS 查询服务会把 IPv4 地址和 IPv6 地址同时返回。")]),v._v(" "),_("li",[v._v("DNS64 服务器返回含 IPv4 地址的 AAAA 记录。")]),v._v(" "),_("li",[v._v("客户端将对应的 IPv4 地址请求发送给一个 NAT64 路由器")]),v._v(" "),_("li",[v._v("由这个 NAT64 路由器将 IPv6 地址转换为 IPv4 地址，从而访问 IPv4 网络，并收集结果。")]),v._v(" "),_("li",[v._v("消息返回到客户端。")])]),v._v(" "),_("p",[_("strong",[v._v("情况 2：两个 IPv6 网络被 IPv4 隔离")])]),v._v(" "),_("p",[v._v("这种情况在普及 IPv6 的过程中比较常见，IPv6 的网络一开始是一个个孤岛，IPv6 网络需要通信，就需要一些特别的手段。")]),v._v(" "),_("p",[v._v("不知道你有没有联想到坐火车穿越隧道的感觉，连接两个孤岛 IPv6 网络，其实就是在 IPv4 网络中建立一条隧道。如下图所示：")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://linkeq.oss-cn-chengdu.aliyuncs.com/img/2022/07/23/Cgp9HWCH4ziAD-hYAAMdJ6IgvWE780-fafccc.png",alt:"Drawing 11.png"}})]),v._v(" "),_("p",[_("strong",[v._v("隧道的本质就是在两个 IPv6 的网络出口网关处，实现一段地址转换的程序")]),v._v("。")]),v._v(" "),_("h3",{attrs:{id:"总结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[v._v("#")]),v._v(" 总结")]),v._v(" "),_("p",[v._v("总结下，"),_("strong",[v._v("IPv6 解决的是地址耗尽的问题")]),v._v("。")]),v._v(" "),_("p",[v._v("Tunnel 技术是什么了吗？")]),v._v(" "),_("p",[v._v("【"),_("strong",[v._v("解析")]),v._v("】Tunnel  就是隧道，这和现实中的隧道是很相似的。隧道不是只有一辆车通过，而是每天都有大量的车辆来来往往。两个网络，用隧道连接，位于两个网络中的设备通信，都可以使用这个隧道。隧道是两个网络间用程序定义的一种通道。具体来说，如果两个 IPv6 网络被 IPv4 分隔开，那么两个 IPv6 网络的出口处（和 IPv4  网络的网关处）就可以用程序（或硬件）实现一个隧道，方便两个网络中设备的通信。")]),v._v(" "),_("h2",{attrs:{id:"局域网-nat-是如何工作的"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#局域网-nat-是如何工作的"}},[v._v("#")]),v._v(" 局域网：NAT 是如何工作的？")]),v._v(" "),_("p",[_("strong",[v._v("这里我先向你提一个问题，数据到王者荣耀服务器可以通过寻址和路由找到目的地，但是数据从王者荣耀服务器回来的时候，王者荣耀服务器如何知道")]),_("code",[v._v("192.168")]),v._v("开头的地址应该如何寻址呢？")]),v._v(" "),_("h3",{attrs:{id:"内部网络和外部网络"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#内部网络和外部网络"}},[v._v("#")]),v._v(" 内部网络和外部网络")]),v._v(" "),_("p",[v._v("对一个组织、机构、家庭来说，我们通常把内部网络称为局域网，外部网络就叫作外网。下图是一个公司多个部门的网络架构。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://linkeq.oss-cn-chengdu.aliyuncs.com/img/2022/07/23/Cgp9HWCJIMaACsQqAAKt__fEo9U561-e7ae2f.png",alt:"图片11.png"}})]),v._v(" "),_("p",[v._v("我们会看到外网通过路由器接入整个公司的局域网，和路由器关联的是三台交换机，代表公司的三个部门。"),_("strong",[v._v("交换机，或者称为链路层交换机，通常工作在链路层；而路由器通常也具有交换机的能力，工作在网络层和链路层")]),v._v("。\n光纤是一种透明的导光介质，多束光可以在一个介质中并行传播，不仅信号容量大，重量轻，并行度高而且传播距离远。\n"),_("strong",[v._v("光线通常都用于主干网络")]),v._v("。")]),v._v(" "),_("h3",{attrs:{id:"局域网数据交换-mac-地址"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#局域网数据交换-mac-地址"}},[v._v("#")]),v._v(" 局域网数据交换（MAC 地址）")]),v._v(" "),_("p",[v._v("接下来我们讨论下同一个局域网中的设备如何交换消息。")]),v._v(" "),_("p",[v._v("首先，我们先明确一个概念，设备间通信的本质其实是设备拥有的网络接口（网卡）间的通信。"),_("strong",[v._v("为了区别每个网络接口，互联网工程任务组（IETF）要求每个设备拥有一个唯一的编号，这个就是 MAC 地址")]),v._v("。")]),v._v(" "),_("p",[_("strong",[v._v("你可能会问：IP 地址不也是唯一的吗")]),v._v("？其实不然，一旦设备更换位置，比如你把你的电脑从北京邮寄的广州，那么 IP 地址就变了，而电脑网卡的 MAC 地址不会发生变化。总的来说，IP 地址更像现实生活中的地址，而 MAC 地址更像你的身份证号。\n"),_("strong",[v._v("在一个局域网中，我们不可以将消息从一个接口（网卡）发送到另一个接口（网卡），而是要通过交换机")]),v._v("。\n线路都是由网卡连接交换机的。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://linkeq.oss-cn-chengdu.aliyuncs.com/img/2022/07/23/CioPOWCJINCAWTthAACzGJa966I160-249653.png",alt:"图片2.png"}})]),v._v(" "),_("p",[v._v("总结下，数据的发送方，将自己的 MAC 地址、目的地 MAC 地址，以及数据作为一个分组（Packet），也称作 Frame 或者封包，发送给交换机。交换机再根据目的地 MAC 地址，将数据转发到目的地的网络接口（网卡）。")]),v._v(" "),_("p",[_("strong",[v._v("最后一个问题，你可能问，这个分组或者 Frame，是不是 IP 协议的分组呢")]),v._v("？——不是，这里提到的是链路层的数据交换，它支持 IP 协议工作，是网络层的底层。所以，"),_("strong",[v._v("如果 IP 协议要传输数据，就要将数据转换成为链路层的分组，然后才可以在链路层传输")]),v._v("。\nMTU 这个缩写词，它指的是 Maximun Transmission Unit，最大传输单元，意思是链路层网络允许的最大传输数据分组的大小。"),_("strong",[v._v("因此 IP 协议要根据 MTU 拆分封包")]),v._v("。\nMSS（Maximun Segment Size，最大段大小）是 TCP 段，或者称为 TCP 分组（TCP Packet）的最大大小。"),_("strong",[v._v("MSS 是传输层概念，MTU 是链路层概念")]),v._v("。\n"),_("strong",[v._v("因为 TCP 解决的是广域网的问题，MTU 是一个链路层的概念，要知道不同网络 MTU 是不同的，所以二者不可能产生关联。这也是为什么 IP 协议还可能会再拆包的原因")]),v._v("。")]),v._v(" "),_("h3",{attrs:{id:"地址解析协议-arp"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#地址解析协议-arp"}},[v._v("#")]),v._v(" 地址解析协议（ARP）")]),v._v(" "),_("p",[v._v("上面我们讨论了 MAC 地址，链路层通过 MAC 地址定位网络接口（网卡）。在一个网络接口向另一个网络接口发送数据的时候，至少要提供这样 3 个字段：")]),v._v(" "),_("ol",[_("li",[v._v("源 MAC 地址")]),v._v(" "),_("li",[v._v("目标 MAC 地址")]),v._v(" "),_("li",[v._v("数据")])]),v._v(" "),_("p",[_("strong",[v._v("这里我们一起再来思考一个问题，对于一个网络接口，它如何能知道目标接口的 MAC 地址呢")]),v._v("？")]),v._v(" "),_("h3",{attrs:{id:"地址解析协议-arp-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#地址解析协议-arp-2"}},[v._v("#")]),v._v(" 地址解析协议（ARP）")]),v._v(" "),_("p",[v._v("一个网络接口向另一个网络接口发送数据的时候，至少要提供这样 3 个字段：")]),v._v(" "),_("ol",[_("li",[v._v("源 MAC 地址")]),v._v(" "),_("li",[v._v("目标 MAC 地址")]),v._v(" "),_("li",[v._v("数据")])]),v._v(" "),_("p",[v._v("一个中间服务帮助根据 IP 地址找到 MAC 地址——这就是地址解析协议（Address Resolution Protocol，ARP）。")]),v._v(" "),_("p",[v._v("整个工作过程和 DNS 非常类似，如果一个网络接口已经知道目标 IP 地址对应的 MAC 地址了，它会将数据直接发送给交换机，交换机将数据转发给目的地，这个过程如下图所示：")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://linkeq.oss-cn-chengdu.aliyuncs.com/img/2022/07/23/Cgp9HWCJIN6ALcIOAAGvaaKiqtM412-641948.png",alt:"图片3.png"}})]),v._v(" "),_("p",[v._v("已知目的地 MAC 可以直接发送")]),v._v(" "),_("p",[v._v("那么如果网络接口不知道目的地地址呢？这个时候，地址解析协议就开始工作了。发送接口会发送一个广播查询给到交换机，交换机将查询转发给所有接口。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://linkeq.oss-cn-chengdu.aliyuncs.com/img/2022/07/23/CioPOWCJIOaAWL2vAAIjZo8-JVY343-81effd.png",alt:"图片4.png"}})]),v._v(" "),_("p",[v._v("如果某个接口发现自己就是对方要查询的接口，则会将自己的 MAC 地址回传。接下来，会在交换机和发送接口的 ARP 表中，增加一个缓存条目。也就是说，接下来发送接口再次向 IP 地址 2.2.2.2 发送数据时，不需要再广播一次查询了。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://linkeq.oss-cn-chengdu.aliyuncs.com/img/2022/07/23/Cgp9HWCJIO-ASE1gAAIXUxAepRs289-761c84.png",alt:"图片5.png"}})]),v._v(" "),_("p",[_("strong",[v._v("前面提到这个过程和 DNS 非常相似，采用的是逐级缓存的设计减少 ARP 请求")]),v._v("。\nARP 表是一种缓存，也要考虑缓存的设计")]),v._v(" "),_("p",[v._v("家用的路由器，也具备交换机的功能")]),v._v(" "),_("h3",{attrs:{id:"连接内网"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#连接内网"}},[v._v("#")]),v._v(" 连接内网")]),v._v(" "),_("p",[v._v("有时候，公司内部有多个子网。这个时候一个子网如果要访问另一个子网，就需要通过路由器。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://linkeq.oss-cn-chengdu.aliyuncs.com/img/2022/07/23/CioPOWCJIPqACRqBAAJZJ8-Xz9M520-ac1552.png",alt:"图片66.png"}})]),v._v(" "),_("p",[v._v("也就是说，图中的路由器，其实充当了两个子网通信的桥梁。")]),v._v(" "),_("p",[_("strong",[v._v("子网 2 的交换机如何根据 IP 地址找到接收接口呢")]),v._v(" ？答案是通过查询 ARP 表。")]),v._v(" "),_("h3",{attrs:{id:"连接外网-网络地址转换技术-nat"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#连接外网-网络地址转换技术-nat"}},[v._v("#")]),v._v(" 连接外网（网络地址转换技术，NAT）")]),v._v(" "),_("p",[v._v("当"),_("code",[v._v("22.22.22.22")]),v._v("寻找"),_("code",[v._v("192.168.0.1")]),v._v("的时候，是寻找一个私网 IP，这个时候是找不到的。解决方案就是网络地址转换技术（Network Address Translation）。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://linkeq.oss-cn-chengdu.aliyuncs.com/img/2022/07/23/Cgp9HWCJIQ6AX2bSAAF-MBsPxPo191-d9470d.png",alt:"图片7.png"}})]),v._v(" "),_("p",[v._v("NAT 技术转换的是 IP 地址，私有 IP 通过 NAT 转换为公网 IP 发送到服务器。服务器的响应，通过 NAT 转换为私有 IP，返回给客户端。通过这种方式，就解决了内网和外网的通信问题。")]),v._v(" "),_("p",[_("strong",[v._v("通常意义上，交换机不具有路由功能，路由器往往具有交换功能")]),v._v("。\n往往路由器交换的效率，不如交换机。已知 IP 地址，找到 MAC 地址的协议，叫作地址解析协议（ARP）。")]),v._v(" "),_("p",[v._v("网络地址转换协议是如何工作的？")]),v._v(" "),_("p",[v._v("【"),_("strong",[v._v("解析")]),v._v("】网络地址解析协议（NAT）解决的是内外网通信的问题。NAT  通常发生在内网和外网衔接的路由器中，由路由器中的 NAT 模块提供网络地址转换能力。从设计上看，NAT 最核心的能力，就是能够将内网中某个 IP 地址映射到外网 IP，然后再把数据发送给外网的服务器。当服务器返回数据的时候，NAT 又能够准确地判断外网服务器的数据返回给哪个内网 IP。")]),v._v(" "),_("p",[v._v("你可以思考下 NAT 是如何做到这点的呢？需要做两件事。")]),v._v(" "),_("ol",[_("li",[v._v("NAT 需要作为一个中间层替换 IP 地址。 发送的时候，NAT 替换源 IP 地址（也就是将内网 IP 替换为出口 IP）；接收的时候，NAT 替换目标 IP 地址（也就是将出口 IP 替换回内网 IP 地址）。")]),v._v(" "),_("li",[v._v("NAT 需要缓存内网 IP 地址和出口 IP 地址 + 端口的对应关系。也就是说，发送的时候，NAT 要为每个替换的内网 IP  地址分配不同的端口，确保出口 IP 地址+ 端口的唯一性，这样当服务器返回数据的时候，就可以根据出口 IP 地址 + 端口找到内网 IP。")])])])}),[],!1,null,null,null);_.default=a.exports}}]);